{"version":3,"file":"component---src-templates-article-index-tsx-e32b90de270b910eb2a5.js","mappings":"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","sources":["webpack://SNinjo Blog/./src/components/Copyright/index.tsx","webpack://SNinjo Blog/./src/components/Copyright/index.module.scss","webpack://SNinjo Blog/./src/components/Navigation/index.module.scss","webpack://SNinjo Blog/./src/components/Navigation/index.tsx","webpack://SNinjo Blog/./src/components/SEO/index.tsx","webpack://SNinjo Blog/./src/components/Menu/index.module.scss","webpack://SNinjo Blog/./src/components/Menu/index.tsx","webpack://SNinjo Blog/./src/templates/Article/index.tsx","webpack://SNinjo Blog/./src/templates/Article/index.module.scss","webpack://SNinjo Blog/./src/tools/Language/index.ts"],"sourcesContent":["import React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport * as style from './index.module.scss';\r\n\r\n\r\nconst Copyright = () => {\r\n    return (\r\n        <Link\r\n            to='/Preface/Copyright'\r\n            className={style.link}\r\n        >\r\n            <p>SNinjo 2023 Â© all rights reserved</p>\r\n        </Link>\r\n    )\r\n}\r\nexport default Copyright;","// extracted by mini-css-extract-plugin\nexport var link = \"index-module--link--288ba\";","// extracted by mini-css-extract-plugin\nexport var img = \"index-module--img--50e58\";\nexport var link = \"index-module--link--490a4\";\nexport var nav = \"index-module--nav--287f4\";","import React, { FC } from 'react';\r\nimport { Link, useStaticQuery, graphql, navigate } from 'gatsby';\r\nimport { StaticImage } from 'gatsby-plugin-image';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype QueriedData = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = {\r\n    currentPath: string\r\n}\r\nconst Navigation: FC<Props> = ({ currentPath }) => {\r\n    const { site }: QueriedData = useStaticQuery(graphql`\r\n        query Navigation {\r\n            site {\r\n                siteMetadata {\r\n                    languages {\r\n                        id\r\n                        name\r\n                        path\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const languages = site.siteMetadata.languages;\r\n\r\n    const navigateTo = (fromLanguagePath: string, toLanguagePath: string) => {\r\n        navigate( currentPath.replace(new RegExp(`\\/${fromLanguagePath}\\/?$`), `\\/${toLanguagePath}`) );\r\n    }\r\n\r\n\r\n    return (\r\n        <nav\r\n            className={style.nav}\r\n        >\r\n            <Link\r\n                to='/'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/blog.png'\r\n                    alt='blog logo'\r\n                    title='SNinjo Blog'\r\n                    loading='eager'\r\n                />\r\n            </Link>\r\n            <a\r\n                href='https://SNinjo.com'\r\n                target='_blank'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/sninjo.png'\r\n                    alt='SNinjo logo'\r\n                    title='SNinjo Personal Website'\r\n                    loading='eager'\r\n                />\r\n            </a>\r\n            <a\r\n                href='https://SNinjo.com/contact'\r\n                target='_blank'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/email.png'\r\n                    alt='contact icon'\r\n                    title='Contact Information'\r\n                    loading='eager'\r\n                />\r\n            </a>\r\n\r\n            <select\r\n                defaultValue={getLanguage(currentPath, languages).path}\r\n\r\n                onChange={  event => navigateTo(getLanguage(currentPath, languages).path, event.target.value)  }\r\n            >\r\n                {\r\n                    languages.map((language, index) => (\r\n                        <option\r\n                            key={`Language${index}`}\r\n                            value={language.path}\r\n                        >\r\n                            {language.name}\r\n                        </option>\r\n                    ))\r\n                }\r\n            </select>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navigation;","import React, { FC } from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\n\r\n\r\ntype Props = {\r\n    title: string\r\n    pathname: string\r\n}\r\n\r\nconst SEO: FC<Props> = ({ title: subtitle, pathname }) => {\r\n    const { site } = useStaticQuery(graphql`\r\n        query SEO {\r\n            site {\r\n                siteMetadata {\r\n                    title\r\n                    description\r\n                    author\r\n                    image\r\n                    siteUrl\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const { title: mainTitle, description, author, image: imagePath, siteUrl } = site.siteMetadata;\r\n    const title = `${subtitle? `${subtitle} | ` : ''}${mainTitle}`;\r\n    const url = `${siteUrl}${pathname}`;\r\n    const image = `${siteUrl}${imagePath}`;\r\n\r\n\r\n    return (\r\n        <>\r\n            <title>{title}</title>\r\n            <link rel='canonical' href={url} />\r\n\r\n            <meta name=\"description\" content={description} />\r\n            <meta name=\"image\" content={image} />\r\n\r\n            <meta name='og:title' content={title} />\r\n            <meta name='og:description' content={description} />\r\n            <meta name='og:image' content={image} />\r\n            <meta name='og:type' content='website' />\r\n            <meta name='og:url' content={url} />\r\n            <meta name='og:site_name' content={mainTitle} />\r\n            \r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n            <meta name=\"twitter:title\" content={title} />\r\n            <meta name=\"twitter:url\" content={url} />\r\n            <meta name=\"twitter:description\" content={description} />\r\n            <meta name=\"twitter:image\" content={image} />\r\n            {/* <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\r\n        </>\r\n    )\r\n}\r\nexport default SEO;","// extracted by mini-css-extract-plugin\nexport var bottom = \"index-module--bottom--f3270\";\nexport var currentPath = \"index-module--currentPath--87fa4\";\nexport var imageContainer = \"index-module--imageContainer--7d443\";\nexport var img = \"index-module--img--14cbc\";\nexport var link = \"index-module--link--2398e\";\nexport var nav = \"index-module--nav--88d41\";\nexport var show = \"index-module--show--d0168\";","import React, { FC, useState } from 'react';\r\nimport { Link, useStaticQuery, graphql } from 'gatsby';\r\nimport { StaticImage } from 'gatsby-plugin-image';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport Navigation from 'components/Navigation';\r\nimport Copyright from 'components/Copyright';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype QueriedData = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = {\r\n    currentPath: string\r\n    contents: Array<{\r\n        title: string\r\n        depth: number\r\n        path: string\r\n    }>\r\n}\r\n\r\nconst Menu: FC<Props> = ({ currentPath, contents: arrContents }) => {\r\n    const { site }: QueriedData = useStaticQuery(graphql`\r\n        query Menu {\r\n            site {\r\n                siteMetadata {\r\n                    languages {\r\n                        id\r\n                        path\r\n                        contents\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const language = getLanguage(currentPath, site.siteMetadata.languages);\r\n\r\n    const [isShow, setDisplayState] = useState(false);\r\n\r\n\r\n    return (\r\n        <nav\r\n            className={`${style.nav} ${isShow? style.show : ''}`}\r\n        >\r\n            <div\r\n                className={`${style.imageContainer} ${isShow? '' : style.show}`}\r\n                \r\n                onClick={() => setDisplayState(true)}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/list.png'\r\n                    alt='list icon'\r\n                    title='Open menu'\r\n                    loading='eager'\r\n                />\r\n            </div>\r\n            <div\r\n                className={`${style.imageContainer} ${isShow? style.show : ''}`}\r\n                \r\n                onClick={() => setDisplayState(false)}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/cross.png'\r\n                    alt='cross icon'\r\n                    title='Close menu'\r\n                    loading='eager'\r\n                />\r\n            </div>\r\n            <Link\r\n                to={`/contents/${language.path}`}\r\n                className={style.link}\r\n            >\r\n                <span>{language.contents}</span>\r\n            </Link>\r\n            {\r\n                arrContents.map((contents, index) => (\r\n                    <Link\r\n                        key={`Link${index}`}\r\n                        to={contents.path}\r\n                        className={`${style.link} ${ currentPath.match(new RegExp(`${contents.path}[a-z]*\\/?$`))? style.currentPath : '' }`}\r\n                    >\r\n                        <span\r\n                            style={{paddingLeft: `${20 * contents.depth}px`}}\r\n                        >\r\n                            {contents.title}\r\n                        </span>\r\n                    </Link>\r\n                ))\r\n            }\r\n\r\n            <div\r\n                className={style.bottom}\r\n            >\r\n                <Navigation\r\n                    currentPath={currentPath}\r\n                />\r\n                <Copyright />\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Menu;","import React, { FC } from 'react';\r\nimport { graphql, PageProps } from 'gatsby';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport Layout from 'components/Layout';\r\nimport Menu from 'components/Menu';\r\nimport SEO from 'components/SEO';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype DataProps = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n    markdownRemark: {\r\n        html: string\r\n        fields: {\r\n            date: string\r\n        }\r\n        frontmatter: {\r\n            path: string\r\n            title: string\r\n        }\r\n    }\r\n    allMarkdownRemark: {\r\n        nodes: Array<{\r\n            frontmatter: {\r\n                title: string\r\n            }\r\n            fields: {\r\n                depth: number\r\n                path: string\r\n            }\r\n        }>\r\n    }\r\n}\r\n\r\nconst ArticleTemplate: FC<PageProps<DataProps>> = ({ data, location }) => {\r\n    const { markdownRemark: article } = data;\r\n    return (\r\n        <Layout\r\n            language={ getLanguage(location.pathname, data.site.siteMetadata.languages).id }\r\n        >\r\n            <div\r\n                className={style.div}\r\n            >\r\n                <Menu\r\n                    currentPath={location.pathname}\r\n                    contents={\r\n                        data.allMarkdownRemark.nodes\r\n                            .map(node => ({\r\n                                title: node.frontmatter.title,\r\n                                depth: node.fields.depth,\r\n                                path: node.fields.path,\r\n                            }))\r\n                    }\r\n                />\r\n\r\n                <section>\r\n                    <div\r\n                        className={style.container}\r\n                    >\r\n                        <header>\r\n                            <h1>{article.frontmatter.title}</h1>\r\n                            <h3>{article.fields.date}</h3>\r\n                        </header>\r\n                        <div\r\n                            className={style.article}\r\n                            dangerouslySetInnerHTML={{ __html: article.html }}\r\n                        />\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </Layout>\r\n  )\r\n}\r\nexport default ArticleTemplate;\r\n\r\nexport const Head: FC<PageProps<DataProps>> = ({ data, location }) => (\r\n    <SEO\r\n        title={data.markdownRemark.frontmatter.title}\r\n        pathname={location.pathname}\r\n    />\r\n)\r\n\r\n\r\nexport const query = graphql`\r\n    query Article($id: String!, $regexContents: String!, $language: String!) {\r\n        site {\r\n            siteMetadata {\r\n                languages {\r\n                    id\r\n                    path\r\n                    contents\r\n                }\r\n            }\r\n        }\r\n        markdownRemark(id: {eq: $id}) {\r\n            html\r\n            fields {\r\n                date\r\n            }\r\n            frontmatter {\r\n                title\r\n            }\r\n        }\r\n        allMarkdownRemark(\r\n            sort: [\r\n                {frontmatter: {order: ASC}},\r\n                {fields: {purePath: ASC}}\r\n            ]\r\n            filter: { fields: {\r\n                contents: {regex: $regexContents},\r\n                language: {eq: $language}\r\n            }}\r\n        ) {\r\n            nodes {\r\n                frontmatter {\r\n                    title\r\n                }\r\n                fields {\r\n                    depth\r\n                    path\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n","// extracted by mini-css-extract-plugin\nexport var article = \"index-module--article--d8571\";\nexport var bottom = \"index-module--bottom--9d00e\";\nexport var container = \"index-module--container--7de9d\";\nexport var currentPath = \"index-module--currentPath--3f4f6\";\nexport var div = \"index-module--div--a334b\";\nexport var imageContainer = \"index-module--imageContainer--499ab\";\nexport var img = \"index-module--img--2720d\";\nexport var link = \"index-module--link--42a5a\";\nexport var nav = \"index-module--nav--e1ac6\";\nexport var show = \"index-module--show--fc7f8\";","export type language = {\r\n    id: string,\r\n    name: string,\r\n    path: string,\r\n    contents: string,\r\n    notMatch: string,\r\n}\r\n\r\nexport function getLanguage(path: string, languages: Array<language>): language {\r\n    let defaultLanguage: language;\r\n    for (const language of languages) {\r\n        if (  !language.id || !language.path && (language.path !== '')  ) throw Error('Language configuration error, please add \"id\" and \"path\" in graphql')\r\n\r\n        if (language.id === 'en') defaultLanguage = language;\r\n        else if (path.match(new RegExp(`\\/${language.path}\\/?$`))) return language;\r\n    }\r\n    return defaultLanguage!;\r\n}"],"names":["React","Link","to","className","img","_ref","currentPath","site","useStaticQuery","languages","siteMetadata","style","StaticImage","src","alt","title","loading","href","target","defaultValue","getLanguage","path","onChange","event","navigateTo","fromLanguagePath","toLanguagePath","value","navigate","replace","RegExp","map","language","index","key","name","subtitle","pathname","mainTitle","description","author","image","imagePath","siteUrl","url","rel","content","imageContainer","show","contents","arrContents","isShow","setDisplayState","useState","onClick","match","paddingLeft","depth","Navigation","Copyright","data","location","markdownRemark","article","Layout","id","Menu","allMarkdownRemark","nodes","node","frontmatter","fields","date","dangerouslySetInnerHTML","__html","html","Head","_ref2","SEO","defaultLanguage","Error"],"sourceRoot":""}