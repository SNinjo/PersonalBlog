{"version":3,"file":"component---src-pages-index-tsx-561ddc80a9c26228b42b.js","mappings":"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","sources":["webpack://SNinjo Blog/./src/components/Copyright/index.tsx","webpack://SNinjo Blog/./src/components/Copyright/index.module.scss","webpack://SNinjo Blog/./src/components/SEO/index.tsx","webpack://SNinjo Blog/./src/pages/index.tsx","webpack://SNinjo Blog/./src/pages/index.module.scss","webpack://SNinjo Blog/./src/tools/Language/index.ts"],"sourcesContent":["import React, { FC } from 'react';\nimport { Link, useStaticQuery, graphql } from 'gatsby';\n\nimport { language, getLanguage } from '../../tools/Language';\nimport * as style from './index.module.scss';\n\n\ntype QueriedData = {\n    site: {\n        siteMetadata: {\n            languages: Array<language>\n        }\n    }\n}\n\ntype Props = {\n    currentPath: string\n}\nconst Copyright: FC<Props> = ({ currentPath }) => {\n    const { site }: QueriedData = useStaticQuery(graphql`\n        query Copyright {\n            site {\n                siteMetadata {\n                    languages {\n                        id\n                        name\n                        path\n\t\t\t\t\t\tcopyright\n                    }\n                }\n            }\n        }\n    `)\n    const languages = site.siteMetadata.languages;\n\n    return (\n        <Link\n            to={`/Preface/Copyright${getLanguage(currentPath, languages).path}`}\n            className={style.link}\n        >\n            <p>{getLanguage(currentPath, languages).copyright}</p>\n        </Link>\n    )\n}\nexport default Copyright;","// extracted by mini-css-extract-plugin\nexport var link = \"index-module--link--288ba\";","import React, { FC } from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\n\ntype Props = {\n    title: string\n    pathname: string\n}\n\nconst SEO: FC<Props> = ({ title: subtitle, pathname }) => {\n    const { site } = useStaticQuery(graphql`\n        query SEO {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    author\n                    image\n                    siteUrl\n                }\n            }\n        }\n    `)\n    const { title: mainTitle, description, author, image: imagePath, siteUrl } = site.siteMetadata;\n    const title = `${subtitle? `${subtitle} | ` : ''}${mainTitle}`;\n    const url = `${siteUrl}${pathname}`;\n    const image = `${siteUrl}/${imagePath}`;\n\n\n    return (\n        <>\n            <title>{title}</title>\n            <link rel='canonical' href={url} />\n\n            <meta name=\"description\" content={description} />\n            <meta name=\"image\" content={image} />\n\n            <meta name='og:title' content={title} />\n            <meta name='og:description' content={description} />\n            <meta name='og:image' content={image} />\n            <meta name='og:type' content='website' />\n            <meta name='og:url' content={url} />\n            <meta name='og:site_name' content={mainTitle} />\n            \n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:title\" content={title} />\n            <meta name=\"twitter:url\" content={url} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:image\" content={image} />\n            {/* <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\n        </>\n    )\n}\nexport default SEO;","import React, { FC } from 'react';\nimport { Link, PageProps } from 'gatsby';\nimport { StaticImage } from 'gatsby-plugin-image';\n\nimport Layout from 'components/Layout';\nimport Copyright from 'components/Copyright';\nimport SEO from 'components/SEO';\nimport * as style from './index.module.scss';\n\n\nconst IndexPage: FC<PageProps> = ({ location }) => {\n    return (\n        <Layout\n            language='en'\n        >\n            <Link\n                to='/contents'\n                className={style.link}\n            >\n                <StaticImage\n                    className={style.icon}\n                    src='../images/blog.png'\n                    alt='blog logo'\n                    loading='eager'\n                />\n                <h1>SNinjo Blog</h1>\n                <span> &gt; click to enter the blog &lt; </span>\n            </Link>\n\t\t\t<div\n\t\t\t\tclassName={style.copyright}\n\t\t\t>\n\t\t\t\t<Copyright\n\t\t\t\t\tcurrentPath={location.pathname}\n\t\t\t\t/>\n\t\t\t</div>\n        </Layout>\n    )\n}\nexport default IndexPage;\n\nexport const Head: FC<PageProps> = ({ location }) => (\n    <SEO\n        pathname={location.pathname}\n    />\n)","// extracted by mini-css-extract-plugin\nexport var breathe = \"index-module--breathe--bc10c\";\nexport var copyright = \"index-module--copyright--e0533\";\nexport var icon = \"index-module--icon--a2d1d\";\nexport var link = \"index-module--link--9ea51\";","export type language = {\n    id: string,\n    name: string,\n    path: string,\n    contents: string,\n\theadline: string,\n\tcopyright: string,\n    notMatch: string,\n}\n\nexport function getLanguage(path: string, languages: Array<language>): language {\n    let defaultLanguage: language;\n    for (const language of languages) {\n        if (  !language.id || !language.path && (language.path !== '')  ) throw Error('Language configuration error, please add \"id\" and \"path\" in graphql')\n\n        if (language.id === 'en') defaultLanguage = language;\n        else if (path.match(new RegExp(`${language.path}$`))) return language;\n    }\n    return defaultLanguage!;\n}"],"names":["_ref","currentPath","site","useStaticQuery","languages","siteMetadata","React","Link","to","getLanguage","path","className","copyright","title","subtitle","pathname","mainTitle","description","author","image","imagePath","siteUrl","url","rel","href","name","content","location","Layout","language","StaticImage","src","alt","loading","__imageData","Copyright","Head","_ref2","SEO","defaultLanguage","id","Error","match","RegExp"],"sourceRoot":""}