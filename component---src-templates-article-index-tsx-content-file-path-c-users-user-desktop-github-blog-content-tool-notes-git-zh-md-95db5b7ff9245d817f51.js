"use strict";(self.webpackChunkSNinjo_Blog=self.webpackChunkSNinjo_Blog||[]).push([[8407],{1248:function(e,l,n){n.r(l),n.d(l,{Head:function(){return f},default:function(){return b}});var t=n(1151),a=n(7294);function c(e){const l=Object.assign({p:"p",br:"br",a:"a",h1:"h1",ul:"ul",li:"li",pre:"pre",code:"code",ol:"ol"},(0,t.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(l.p,null,"Git 是分散式版本控制系統，功能為追蹤、紀錄各個檔案變更的狀態。被廣泛用於在開發過程中，協調共同開發原始碼的程式設計師之間的工作。",a.createElement(l.br),"\n",a.createElement(l.a,{href:"https://git-scm.com/about"},"查看更多介紹")),"\n",a.createElement(l.h1,null,"一般"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"初始化 (建立 .git 資料夾)","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git init\n")),"\n"),"\n",a.createElement(l.li,null,"克隆存儲庫","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git clone <repository URL>\n")),"\n","淺克隆 (只下載最近一次提交與指定分支)","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git clone --depth 1 -b <branch name> <repository URL>\n")),"\n","連同子模組一起克隆","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git clone --recurse-submodules <repository URL>\n")),"\n"),"\n",a.createElement(l.li,null,"推送本地儲存庫去遠端儲存庫","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git push\n")),"\n"),"\n",a.createElement(l.li,null,"拉取遠端儲存庫回本地儲存庫","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git pull\n")),"\n"),"\n",a.createElement(l.li,null,"顯示工作目錄和暫存的狀態","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git status\n")),"\n"),"\n",a.createElement(l.li,null,"檢視這個分支上的更動","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git diff <file path>\n")),"\n"),"\n"),"\n",a.createElement(l.h1,null,"提交"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"將更改過的檔案建立索引","\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"單一檔案","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git add <file path>\n")),"\n"),"\n",a.createElement(l.li,null,"所有檔案","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git add .\n")),"\n"),"\n"),"\n"),"\n",a.createElement(l.li,null,"提交已建立索引的檔案至本地儲存庫","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},'git commit -m "<message>"\n')),"\n","為所有檔案建立索引並提交","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},'git commit -a -m "<message>"\n')),"\n"),"\n",a.createElement(l.li,null,"顯示歷史提交記錄","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git log\n")),"\n"),"\n",a.createElement(l.li,null,"顯示完整的歷史提交記錄 (reference logs)","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git reflog\n")),"\n"),"\n",a.createElement(l.li,null,"復原提交並創建新的分支","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git revert <commit hash>\n")),"\n"),"\n",a.createElement(l.li,null,"修改提交訊息",a.createElement(l.br),"\n","前一個提交 -> 目標提交",a.createElement(l.br),"\n","上述範例中有兩個提交，更改「目標提交」的訊息","\n",a.createElement(l.ol,null,"\n",a.createElement(l.li,null,"輸入以下指令至終端機，編輯提交變基","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git rebase -i <previous commit hash>\n")),"\n"),"\n",a.createElement(l.li,null,"覆寫第一行的「pick」成「reword」","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"reword <target commit hash> <old commit message>\r\n\r\n# Rebase ...\n")),"\n"),"\n",a.createElement(l.li,null,"修改提交訊息","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"<new commit message>\r\n\r\n# Please enter the commit message for your changes. Lines starting\r\n# with '#' will be ignored, and an empty message aborts the commit.\r\n...\n")),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-output"},"Successfully rebased and updated refs/heads/<branch name>.\n")),"\n"),"\n",a.createElement(l.li,null,"安全地覆蓋遠端分支 (只會覆蓋更改的部分)","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git push --force-with-lease\n")),"\n"),"\n"),"\n"),"\n",a.createElement(l.li,null,"修改提交作者",a.createElement(l.br),"\n","前一個提交 -> 目標提交",a.createElement(l.br),"\n","上述範例中有兩個提交，更改「目標提交」的作者","\n",a.createElement(l.ol,null,"\n",a.createElement(l.li,null,"輸入以下指令至終端機，編輯提交變基","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git rebase -i <previous commit hash>\n")),"\n"),"\n",a.createElement(l.li,null,"覆寫第一行的「pick」成「edit」","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"edit <target commit hash> <old commit message>\r\n\r\n# Rebase ...\n")),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-output"},"Stopped at <target commit hash>...  <target commit message>\r\nYou can amend the commit now, with\r\n\r\n    git commit --amend\r\n\r\nOnce you are satisfied with your changes, run\r\n\r\n    git rebase --continue\n")),"\n"),"\n",a.createElement(l.li,null,"修改提交作者","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},'git commit --amend --author="<author name> \\<<email>\\>"\n')),"\n"),"\n",a.createElement(l.li,null,"修改提交訊息","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"<new commit message>\r\n\r\n# Please enter the commit message for your changes. Lines starting\r\n# with '#' will be ignored, and an empty message aborts the commit.\r\n...\n")),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-output"},"[detached HEAD <new commit hash>] <new commit message>\r\nAuthor: <new author name> \\<<new email>\\>\r\nDate: <new date>\r\n? file changed, ? insertions(+), ? deletion(-)\n")),"\n"),"\n",a.createElement(l.li,null,"結束這個提交的修改","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git rebase --continue\n")),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-output"},"Successfully rebased and updated refs/heads/<branch name>.\n")),"\n"),"\n",a.createElement(l.li,null,"若你有更多的提交要編輯，請繼續重複步驟 4 到 5"),"\n",a.createElement(l.li,null,"安全地覆蓋遠端分支 (只會覆蓋更改的部分)","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git push --force-with-lease\n")),"\n"),"\n"),"\n"),"\n",a.createElement(l.li,null,"合併多個提交成一個",a.createElement(l.br),"\n","第一個提交 -> 第二個提交 -> 第三個提交",a.createElement(l.br),"\n","上述範例中有三個提交，合併「第二個提交」與「第三個提交」","\n",a.createElement(l.ol,null,"\n",a.createElement(l.li,null,"輸入以下指令至終端機，編輯提交變基","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git rebase -i <first commit hash>\n")),"\n"),"\n",a.createElement(l.li,null,"覆寫除了第一行以外的「pick」成「fixup」","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"pick <second commit hash> <second commit message>\r\nfixup <third commit hash> <third commit message>\r\n\r\n# Rebase ...\n")),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-output"},"Successfully rebased and updated refs/heads/<branch name>.\n")),"\n"),"\n",a.createElement(l.li,null,"安全地覆蓋遠端分支 (只會覆蓋更改的部分)","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git push --force-with-lease\n")),"\n"),"\n"),"\n"),"\n",a.createElement(l.li,null,"切換到指定提交","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git checkout <commit hash>\n")),"\n","切換過去並創建分支","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git checkout -b <branch name> <commit hash>\n")),"\n"),"\n",a.createElement(l.li,null,"重設 HEAD 到指定提交","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git reset --hard <commit hash>\n")),"\n"),"\n",a.createElement(l.li,null,"強制用指定的分支覆蓋這個分支","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git reset --hard <branch name>\n")),"\n","舉例來說, 覆蓋「develop」到「master」","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git checkout master\r\ngit reset --hard develop\n")),"\n"),"\n"),"\n",a.createElement(l.h1,null,"分支"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"列出所有分支","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git branch\n")),"\n","包含遠端分支","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git branch -a\n")),"\n"),"\n",a.createElement(l.li,null,"建立分支","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git branch <branch name>\n")),"\n"),"\n",a.createElement(l.li,null,"切換分支","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git checkout <branch name>\n")),"\n","切換並建立分支","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git checkout -b <branch name>\n")),"\n"),"\n",a.createElement(l.li,null,"刪除分支","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git branch -d <branch name>\n")),"\n"),"\n",a.createElement(l.li,null,"刪除遠端分支","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git push <remote> --delete <branch name>\n")),"\n"),"\n",a.createElement(l.li,null,"合併指定分支到這個分支上","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git merge <branch name>\n")),"\n","舉例來說, 合併「develop」到「master」","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git checkout master\r\ngit merge develop\n")),"\n"),"\n"),"\n",a.createElement(l.h1,null,"暫存"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"列出所有暫存","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git stash list\n")),"\n"),"\n",a.createElement(l.li,null,"儲存未提交的更改","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git stash\n")),"\n","也將未追蹤的檔案存至暫存，Git 預設僅儲存修改過或是緩存 (stage) 中追蹤的檔案","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git stash -u\n")),"\n"),"\n",a.createElement(l.li,null,"還原並刪除暫存","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git stash pop\n")),"\n","指定暫存的索引","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git stash pop stash@{n}\n")),"\n","還原並保留暫存","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git stash apply stash@{n}\n")),"\n"),"\n",a.createElement(l.li,null,"刪除暫存","\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"最新的暫存","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git stash drop\n")),"\n"),"\n",a.createElement(l.li,null,"全部的暫存","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git stash clear\n")),"\n"),"\n"),"\n"),"\n"),"\n",a.createElement(l.h1,null,"子模組"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"新增子模組","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git submodule add <repository URL> <directory path>\n")),"\n","新增成功後會生成兩個檔案 .gitmodules 和 <directory path>"),"\n",a.createElement(l.li,null,"刪除子模組","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git rm <submodule name>\n")),"\n"),"\n",a.createElement(l.li,null,"克隆子模組","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git submodule update --init --recursive\n")),"\n"),"\n",a.createElement(l.li,null,"更新至遠端分支最新的提交","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git submodule update --recursive --remote\n")),"\n"),"\n",a.createElement(l.li,null,"指定子模組的版本","\n",a.createElement(l.ol,null,"\n",a.createElement(l.li,null,"進入指模組的資料夾","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"cd <directory path>\n")),"\n"),"\n",a.createElement(l.li,null,"切換版本","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git checkout <commit hash>\n")),"\n"),"\n"),"\n"),"\n"),"\n",a.createElement(l.h1,null,"設定"),"\n",a.createElement(l.p,null,"列出遠端資料庫的網址"),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git remote -v\n")),"\n",a.createElement(l.p,null,"更換遠端資料庫的網址"),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"get remote set-url origin <URL>\n")),"\n",a.createElement(l.p,null,"作用於這個資料夾"),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git config <parameter>\n")),"\n",a.createElement(l.p,null,"作用於這個系統"),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git config --global <parameter>\n")),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"顯示 config (按下「q」離開)","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git config --list\n")),"\n"),"\n",a.createElement(l.li,null,"設定 config","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"git config <key> <value>\n")),"\n","舉例來說, 設定使用者資訊","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},'git config user.name "<username>"\r\ngit config user.email "<email>"\n')),"\n"),"\n"))}var r=function(e){void 0===e&&(e={});const{wrapper:l}=Object.assign({},(0,t.ah)(),e.components);return l?a.createElement(l,e,a.createElement(c,e)):c(e)},m=n(1883),s=n(8032),u=n(7392),i=n(2036),g=n(908),o=n(8197),E=n(2349),h=n(8554),d=n(4072),p=n(1950);const N=e=>{var l;let{data:c,location:r,children:E}=e;const N=c.site.siteMetadata.languages,{mdx:b}=c,f=(0,a.useRef)(null),{0:v,1:w}=(0,a.useState)(!0);return a.createElement(g.Z,{language:(0,i.G)(r.pathname,N).id},a.createElement(o.Z,{currentPath:r.pathname,contents:c.allMdx.nodes.map((e=>({title:e.frontmatter.title,depth:e.fields.depth,path:e.fields.path})))}),a.createElement("div",{ref:f,className:p.hi,onScroll:()=>w(0===f.current.scrollTop)},a.createElement("div",{className:p.nC},a.createElement("header",{className:p.fr},a.createElement("h1",null,b.frontmatter.title),a.createElement("h3",null,b.fields.date)),b.tableOfContents.items?a.createElement("ol",{className:p.Jt},a.createElement("span",null,(0,i.G)(r.pathname,N).headline),null===(l=b.tableOfContents.items)||void 0===l?void 0:l.map((e=>{let{title:l}=e;return a.createElement("li",{key:"Heading_"+l},a.createElement(m.Link,{to:"#"+(0,u.S)(l),className:p.p4},l))}))):a.createElement(a.Fragment,null),a.createElement("div",{className:p.Ig},a.createElement(t.Zo,{components:{a:e=>{let{href:l,children:n}=e;return a.createElement("a",{target:"_blank",href:l},n)},pre:e=>{let{children:l}=e;return a.createElement(h.Z,null,l)},h1:e=>{let{children:l}=e;return a.createElement(d.Z,null,l)}}},E))),a.createElement("button",{className:p.vc,disabled:v,onClick:()=>{(0,m.navigate)(r.pathname),f.current.scrollTo({top:0,behavior:"smooth"})}},a.createElement(s.S,{className:p.BH,src:"../../images/curvedArrow.png",alt:"scroll to top icon",title:"Scroll to top",loading:"eager",__imageData:n(5097)}))))};function b(e){return a.createElement(N,e,a.createElement(r,e))}const f=e=>{let{data:l,location:n}=e;return a.createElement(E.Z,{title:l.mdx.frontmatter.title,pathname:n.pathname})}}}]);
//# sourceMappingURL=component---src-templates-article-index-tsx-content-file-path-c-users-user-desktop-github-blog-content-tool-notes-git-zh-md-95db5b7ff9245d817f51.js.map