{"version":3,"file":"component---src-templates-contents-index-tsx-279e11083d74cedf3ff2.js","mappings":"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","sources":["webpack://SNinjo Blog/./src/components/Copyright/index.tsx","webpack://SNinjo Blog/./src/components/Copyright/index.module.scss","webpack://SNinjo Blog/./src/components/Navigation/index.module.scss","webpack://SNinjo Blog/./src/components/Navigation/index.tsx","webpack://SNinjo Blog/./src/components/SEO/index.tsx","webpack://SNinjo Blog/./src/templates/Contents/index.tsx","webpack://SNinjo Blog/./src/templates/Contents/index.module.scss","webpack://SNinjo Blog/./src/tools/Language/index.ts"],"sourcesContent":["import React, { FC } from 'react';\nimport { Link, useStaticQuery, graphql } from 'gatsby';\n\nimport { language, getLanguage } from '../../tools/Language';\nimport * as style from './index.module.scss';\n\n\ntype QueriedData = {\n    site: {\n        siteMetadata: {\n            languages: Array<language>\n        }\n    }\n}\n\ntype Props = {\n    currentPath: string\n}\nconst Copyright: FC<Props> = ({ currentPath }) => {\n    const { site }: QueriedData = useStaticQuery(graphql`\n        query Copyright {\n            site {\n                siteMetadata {\n                    languages {\n                        id\n                        name\n                        path\n\t\t\t\t\t\tcopyright\n                    }\n                }\n            }\n        }\n    `)\n    const languages = site.siteMetadata.languages;\n\n    return (\n        <Link\n            to={`/Preface/Copyright${getLanguage(currentPath, languages).path}`}\n            className={style.link}\n        >\n            <p>{getLanguage(currentPath, languages).copyright}</p>\n        </Link>\n    )\n}\nexport default Copyright;","// extracted by mini-css-extract-plugin\nexport var link = \"index-module--link--288ba\";","// extracted by mini-css-extract-plugin\nexport var image = \"index-module--image--d7c14\";\nexport var link = \"index-module--link--490a4\";\nexport var nav = \"index-module--nav--287f4\";","import React, { FC } from 'react';\nimport { Link, useStaticQuery, graphql, navigate } from 'gatsby';\nimport { StaticImage } from 'gatsby-plugin-image';\n\nimport { language, getLanguage } from '../../tools/Language';\nimport * as style from './index.module.scss';\nimport Copyright from '../Copyright';\n\n\ntype QueriedData = {\n    site: {\n        siteMetadata: {\n            languages: Array<language>\n        }\n    }\n}\n\ntype Props = {\n    currentPath: string\n}\nconst Navigation: FC<Props> = ({ currentPath }) => {\n    const { site }: QueriedData = useStaticQuery(graphql`\n        query Navigation {\n            site {\n                siteMetadata {\n                    languages {\n                        id\n                        name\n                        path\n                    }\n                }\n            }\n        }\n    `)\n    const languages = site.siteMetadata.languages;\n\n    const navigateTo = (fromLanguagePath: string, toLanguagePath: string) => {\n        navigate( currentPath.replace(new RegExp(`${fromLanguagePath}$`), toLanguagePath) );\n    }\n\n\n    return (\n        <nav\n            className={style.nav}\n        >\n\t\t\t<div>\n\t\t\t\t<a\n\t\t\t\t\thref='https://SNinjo.com'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t\tclassName={style.link}\n\t\t\t\t>\n\t\t\t\t\t<StaticImage\n\t\t\t\t\t\tclassName={style.image}\n\t\t\t\t\t\tsrc='../../images/sninjo.png'\n\t\t\t\t\t\talt='SNinjo logo'\n\t\t\t\t\t\ttitle='SNinjo Personal Website'\n\t\t\t\t\t\tloading='eager'\n\t\t\t\t\t/>\n\t\t\t\t</a>\n\t\t\t\t<Link\n\t\t\t\t\tto='/'\n\t\t\t\t\tclassName={style.link}\n\t\t\t\t>\n\t\t\t\t\t<StaticImage\n\t\t\t\t\t\tclassName={style.image}\n\t\t\t\t\t\tsrc='../../images/blog.png'\n\t\t\t\t\t\talt='SNinjo Blog'\n\t\t\t\t\t\ttitle='SNinjo Blog'\n\t\t\t\t\t\tloading='eager'\n\t\t\t\t\t/>\n\t\t\t\t</Link>\n\t\t\t\t<a\n\t\t\t\t\thref='https://tool.SNinjo.com'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t\tclassName={style.link}\n\t\t\t\t>\n\t\t\t\t\t<StaticImage\n\t\t\t\t\t\tclassName={style.image}\n\t\t\t\t\t\tsrc='../../images/tool.png'\n\t\t\t\t\t\talt='SNinjo Tool'\n\t\t\t\t\t\ttitle='SNinjo Tool'\n\t\t\t\t\t\tloading='eager'\n\t\t\t\t\t/>\n\t\t\t\t</a>\n\t\t\t\t<a\n\t\t\t\t\thref='https://SNinjo.com/contact'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t\tclassName={style.link}\n\t\t\t\t>\n\t\t\t\t\t<StaticImage\n\t\t\t\t\t\tclassName={style.image}\n\t\t\t\t\t\tsrc='../../images/email.png'\n\t\t\t\t\t\talt='contact icon'\n\t\t\t\t\t\ttitle='Contact Information'\n\t\t\t\t\t\tloading='eager'\n\t\t\t\t\t/>\n\t\t\t\t</a>\n\n\t\t\t\t<select\n\t\t\t\t\tdefaultValue={getLanguage(currentPath, languages).path}\n\n\t\t\t\t\tonChange={  event => navigateTo(getLanguage(currentPath, languages).path, event.target.value)  }\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\tlanguages.map((language, index) => (\n\t\t\t\t\t\t\t<option\n\t\t\t\t\t\t\t\tkey={`Language${index}`}\n\t\t\t\t\t\t\t\tvalue={language.path}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{language.name}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t\t<Copyright\n\t\t\t\tcurrentPath={currentPath}\n\t\t\t/>\n        </nav>\n    )\n}\nexport default Navigation;","import React, { FC } from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\n\ntype Props = {\n    title: string\n    pathname: string\n}\n\nconst SEO: FC<Props> = ({ title: subtitle, pathname }) => {\n    const { site } = useStaticQuery(graphql`\n        query SEO {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    author\n                    image\n                    siteUrl\n                }\n            }\n        }\n    `)\n    const { title: mainTitle, description, author, image: imagePath, siteUrl } = site.siteMetadata;\n    const title = `${subtitle? `${subtitle} | ` : ''}${mainTitle}`;\n    const url = `${siteUrl}${pathname}`;\n    const image = `${siteUrl}/${imagePath}`;\n\n\n    return (\n        <>\n            <title>{title}</title>\n            <link rel='canonical' href={url} />\n\n            <meta name=\"description\" content={description} />\n            <meta name=\"image\" content={image} />\n\n            <meta name='og:title' content={title} />\n            <meta name='og:description' content={description} />\n            <meta name='og:image' content={image} />\n            <meta name='og:type' content='website' />\n            <meta name='og:url' content={url} />\n            <meta name='og:site_name' content={mainTitle} />\n            \n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:title\" content={title} />\n            <meta name=\"twitter:url\" content={url} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:image\" content={image} />\n            {/* <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\n        </>\n    )\n}\nexport default SEO;","import React, { FC } from 'react';\nimport { graphql, Link, PageProps } from 'gatsby';\n\nimport { language, getLanguage } from '../../tools/Language';\nimport Layout from 'components/Layout';\nimport Navigation from 'components/Navigation';\nimport SEO from 'components/SEO';\nimport * as style from './index.module.scss';\n\n\ntype DataProps = {\n    site: {\n        siteMetadata: {\n            languages: Array<language>\n        }\n    }\n    allMdx: {\n        nodes: Array<{\n            fields: {\n                contents: string\n                isRoot: boolean\n                language: string\n                path: string\n            }\n            frontmatter: {\n                title: string\n            }\n        }>\n    }\n}\n\nconst ContentsTemplate: FC<PageProps<DataProps>> = ({ data, location }) => {\n    let language = getLanguage(location.pathname, data.site.siteMetadata.languages);\n\n\n    return (\n        <Layout\n            language={language.id}\n        >\n            <div\n                className={style.div}\n            >\n                <h1>{  language.contents  }</h1>\n                <nav\n                    className={style.contents}\n                >\n                    {\n                        data.allMdx.nodes\n                            .filter(node => node.fields.isRoot)\n                            .map((node, index) => (\n                                <Link\n                                    key={`Link${index}`}\n                                    to={`${node.fields.path}`}\n                                    className={style.link}\n                                >\n                                    <span>{node.frontmatter.title}</span>\n                                    <span\n                                        className={style.articleQuantity}\n                                    >\n                                        {\n                                            data.allMdx.nodes\n                                                .filter(article => (article.fields.contents === node.fields.contents))\n                                                .length\n                                        }\n                                    </span>\n                                </Link>\n                            ))\n                    }\n                </nav>\n                \n                <footer>\n\t\t\t\t\t<Navigation\n\t\t\t\t\t\tcurrentPath={location.pathname}\n\t\t\t\t\t/>\n                </footer>\n            </div>\n        </Layout>\n  )\n}\nexport default ContentsTemplate;\n\nexport const Head: FC<PageProps<DataProps>> = ({ data, location }) => (\n    <SEO\n        title={  getLanguage(location.pathname, data.site.siteMetadata.languages).contents  }\n        pathname={location.pathname}\n    />\n)\n\n\nexport const query = graphql`\n    query Contents($language: String!) {\n        site {\n            siteMetadata {\n                languages {\n                    id\n                    path\n                    contents\n                }\n            }\n        }\n        allMdx(\n            filter: {fields: {language: {eq: $language}}}\n            sort: {frontmatter: {order: ASC}}\n        ) {\n            nodes {\n                fields {\n                    contents\n                    isRoot\n                    language\n                    path\n                }\n                frontmatter {\n                    title\n                }\n            }\n        }\n    }\n`\n","// extracted by mini-css-extract-plugin\nexport var articleQuantity = \"index-module--articleQuantity--a7d6c\";\nexport var contents = \"index-module--contents--9c479\";\nexport var div = \"index-module--div--a06d1\";\nexport var link = \"index-module--link--7b0da\";","export type language = {\n    id: string,\n    name: string,\n    path: string,\n    contents: string,\n\theadline: string,\n\tcopyright: string,\n    notMatch: string,\n}\n\nexport function getLanguage(path: string, languages: Array<language>): language {\n    let defaultLanguage: language;\n    for (const language of languages) {\n        if (  !language.id || !language.path && (language.path !== '')  ) throw Error('Language configuration error, please add \"id\" and \"path\" in graphql')\n\n        if (language.id === 'en') defaultLanguage = language;\n        else if (path.match(new RegExp(`${language.path}$`))) return language;\n    }\n    return defaultLanguage!;\n}"],"names":["_ref","currentPath","site","useStaticQuery","languages","siteMetadata","React","Link","to","getLanguage","path","className","copyright","href","target","style","StaticImage","src","alt","title","loading","defaultValue","onChange","event","navigateTo","fromLanguagePath","toLanguagePath","value","navigate","replace","RegExp","map","language","index","key","name","Copyright","subtitle","pathname","mainTitle","description","author","image","imagePath","siteUrl","url","rel","content","data","location","Layout","id","contents","allMdx","nodes","filter","node","fields","isRoot","frontmatter","article","length","Navigation","Head","_ref2","SEO","defaultLanguage","Error","match"],"sourceRoot":""}