"use strict";(self.webpackChunkSNinjo_Blog=self.webpackChunkSNinjo_Blog||[]).push([[168],{3515:function(e,l,n){n.r(l),n.d(l,{Head:function(){return b},default:function(){return N}});var t=n(1151),a=n(7294);function r(e){const l=Object.assign({h1:"h1",ul:"ul",li:"li",pre:"pre",code:"code",h3:"h3",ol:"ol",br:"br",p:"p"},(0,t.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(l.h1,null,"容器"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"列出所有容器","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker ps\n")),"\n"),"\n",a.createElement(l.li,null,"將映像檔移至容器執行","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker run \\\r\n    --name <container name> \\\r\n\t--network <network name> \\\r\n    -p <outer port>:<inner port> \\\r\n    -v <outer volume path>:<inner volume path> \\\r\n    <image id|repository>:<tag>?\n")),"\n"),"\n",a.createElement(l.li,null,"啟動容器","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker start <image id|repository>:<tag>?\n")),"\n"),"\n",a.createElement(l.li,null,"停止容器","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker stop <image id|repository>:<tag>?\n")),"\n"),"\n",a.createElement(l.li,null,"重啟容器","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker restart <image id|repository>:<tag>?\n")),"\n"),"\n",a.createElement(l.li,null,"刪除容器","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker rm <image id|repository>:<tag>?\n")),"\n"),"\n"),"\n",a.createElement(l.h1,null,"映像檔"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"列出所有映像檔","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker image ls\n")),"\n"),"\n",a.createElement(l.li,null,"標註映像檔","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker tag <image id|repository>:<tag>? <repository>:<tag>?\n")),"\n"),"\n",a.createElement(l.li,null,"刪除映像檔","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker image rm <image id|repository>\n")),"\n"),"\n"),"\n",a.createElement(l.h1,null,"註冊伺服器"),"\n",a.createElement(l.h3,null,"每個註冊伺服器對於 <repository> 都有不同的定義, 且它也決定映像檔將更新到何處"),"\n",a.createElement(l.ol,null,"\n",a.createElement(l.li,null,"Docker hub:",a.createElement(l.br),"\n","<repository> = <user name>/<repository name>"),"\n",a.createElement(l.li,null,"Harbor:",a.createElement(l.br),"\n","<repository> = <domain>/<project>/<repository name>"),"\n"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"登入 docker hub","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker login\n")),"\n"),"\n",a.createElement(l.li,null,"登入 private docker registry","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker login <domain>\n")),"\n"),"\n",a.createElement(l.li,null,"推送映像檔上去伺服器","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker push <repository>:<tag>?\n")),"\n"),"\n",a.createElement(l.li,null,"拉取映像檔下來本地端","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker pull <repository>:<tag>?\n")),"\n"),"\n"),"\n",a.createElement(l.h1,null,"網路"),"\n",a.createElement(l.h3,null,"讓容器互相連接、溝通的網路設定"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"列出所有網路","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker network ls\n")),"\n"),"\n",a.createElement(l.li,null,"顯示網路的詳細設定","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker network inspect <network id|network name>\n")),"\n"),"\n",a.createElement(l.li,null,"將容器連接至網路上 (亦可設定在「docker run --network...」)","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker network connect <network id|network name> <container name>\n")),"\n"),"\n",a.createElement(l.li,null,"將容器從網路上斷開連結","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker network disconnect <network id|network name> <container name>\n")),"\n"),"\n"),"\n",a.createElement(l.h1,null,"其他"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"列出正在執行容器的 log","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker logs <image id|repository>:<tag>?\n")),"\n","顯示最後 <line length> 行的 log","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker logs <image id|repository>:<tag>? --tail <line length>\n")),"\n","即時監聽正在執行容器的 log","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker logs <image id|repository>:<tag>? -f\n")),"\n"),"\n",a.createElement(l.li,null,"進入正在執行容器的 CLI","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker exec -it <image id|repository>:<tag>? /bin/bash\n")),"\n","在一些較老的 Linux 版本不能使用「bash」","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker exec -it <image id|repository>:<tag>? /bin/sh\n")),"\n","可簡寫成","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker exec -it <image id|repository>:<tag>? bash\n")),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker exec -it <image id|repository>:<tag>? sh\n")),"\n"),"\n",a.createElement(l.li,null,"刪除所有的映像檔、容器、快取","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker system prune -a\n")),"\n"),"\n"),"\n",a.createElement(l.h1,null,"Docker Hub"),"\n",a.createElement(l.h3,null,"官方提供的註冊伺服器"),"\n",a.createElement(l.p,null,"以下陳列了一些部屬強大服務的容器"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"Redis",a.createElement(l.br),"\n","一個使用ANSI C編寫的開源、支援網路、基於記憶體、分散式、可選永續性的鍵值對儲存資料庫","\n",a.createElement(l.ol,null,"\n",a.createElement(l.li,null,"下載並運行映像檔","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker run --name redis -p 6379:6379 -d redis\n")),"\n"),"\n",a.createElement(l.li,null,"進入 CLI","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker exec -it redis bash\n")),"\n"),"\n",a.createElement(l.li,null,"執行 redis 指令","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"redis-cli\n")),"\n"),"\n",a.createElement(l.li,null,"測試是否部屬成功","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"ping\n")),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-output"},"PONG\n")),"\n"),"\n"),"\n"),"\n",a.createElement(l.li,null,"RabbitMQ",a.createElement(l.br),"\n","實作進階訊息佇列協定的開源訊息代理軟體","\n",a.createElement(l.ol,null,"\n",a.createElement(l.li,null,"下載並運行映像檔, 一併設置使用帳號","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker run --name rabbitmq -d -p 15672:15672 -p 5672:5672 -e RABBITMQ_DEFAULT_USER=<username> -e RABBITMQ_DEFAULT_PASS=<password> rabbitmq:management\n")),"\n"),"\n",a.createElement(l.li,null,"開啟管理網頁，並輸入剛設置好的帳密",a.createElement(l.br),"\n","> http://localhost:15672"),"\n"),"\n"),"\n"))}var c=function(e){void 0===e&&(e={});const{wrapper:l}=Object.assign({},(0,t.ah)(),e.components);return l?a.createElement(l,e,a.createElement(r,e)):r(e)},m=n(1883),o=n(8032),s=n(7392),u=n(2036),i=n(908),E=n(8197),d=n(2349),g=n(8554),p=n(4072),h=n(1950);const k=e=>{var l;let{data:r,location:c,children:d}=e;const k=r.site.siteMetadata.languages,{mdx:N}=r,b=(0,a.useRef)(null),{0:y,1:f}=(0,a.useState)(!0);return a.createElement(i.Z,{language:(0,u.G)(c.pathname,k).id},a.createElement(E.Z,{currentPath:c.pathname,contents:r.allMdx.nodes.map((e=>({title:e.frontmatter.title,depth:e.fields.depth,path:e.fields.path})))}),a.createElement("div",{ref:b,className:h.hi,onScroll:()=>f(0===b.current.scrollTop)},a.createElement("div",{className:h.nC},a.createElement("header",{className:h.fr},a.createElement("h1",null,N.frontmatter.title),a.createElement("h3",null,N.fields.date)),N.tableOfContents.items?a.createElement("ol",{className:h.Jt},a.createElement("span",null,(0,u.G)(c.pathname,k).headline),null===(l=N.tableOfContents.items)||void 0===l?void 0:l.map((e=>{let{title:l}=e;return a.createElement("li",{key:"Heading_"+l},a.createElement(m.Link,{to:"#"+(0,s.S)(l),className:h.p4},l))}))):a.createElement(a.Fragment,null),a.createElement("div",{className:h.Ig},a.createElement(t.Zo,{components:{a:e=>{let{href:l,children:n}=e;return a.createElement("a",{target:"_blank",href:l},n)},pre:e=>{let{children:l}=e;return a.createElement(g.Z,null,l)},h1:e=>{let{children:l}=e;return a.createElement(p.Z,null,l)}}},d))),a.createElement("button",{className:h.vc,disabled:y,onClick:()=>{(0,m.navigate)(c.pathname),b.current.scrollTo({top:0,behavior:"smooth"})}},a.createElement(o.S,{className:h.BH,src:"../../images/curvedArrow.png",alt:"scroll to top icon",title:"Scroll to top",loading:"eager",__imageData:n(5097)}))))};function N(e){return a.createElement(k,e,a.createElement(c,e))}const b=e=>{let{data:l,location:n}=e;return a.createElement(d.Z,{title:l.mdx.frontmatter.title,pathname:n.pathname})}}}]);
//# sourceMappingURL=component---src-templates-article-index-tsx-content-file-path-c-users-user-desktop-github-blog-content-tool-notes-docker-zh-md-c86c716e15943bff228e.js.map