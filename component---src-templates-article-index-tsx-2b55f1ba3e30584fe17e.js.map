{"version":3,"file":"component---src-templates-article-index-tsx-2b55f1ba3e30584fe17e.js","mappings":"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","sources":["webpack://blog/./src/components/Navigation/index.module.scss","webpack://blog/./src/components/Navigation/index.tsx","webpack://blog/./src/components/Menu/index.module.scss","webpack://blog/./src/components/Menu/index.tsx","webpack://blog/./src/templates/Article/index.tsx","webpack://blog/./src/templates/Article/index.module.scss","webpack://blog/./src/tools/Language/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var img = \"index-module--img--50e58\";\nexport var link = \"index-module--link--490a4\";\nexport var nav = \"index-module--nav--287f4\";","import React, { FC } from 'react';\r\nimport { Link, useStaticQuery, graphql, navigate } from 'gatsby';\r\nimport { StaticImage } from 'gatsby-plugin-image';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype QueriedData = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\ntype iProps = {\r\n    currentPath: string\r\n}\r\nconst Navigation: FC<iProps> = ({ currentPath }) => {\r\n    const { site }: QueriedData = useStaticQuery(graphql`\r\n        query Navigation {\r\n            site {\r\n                siteMetadata {\r\n                    languages {\r\n                        id\r\n                        name\r\n                        path\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const languages = site.siteMetadata.languages;\r\n\r\n    const navigateTo = (fromLanguagePath: string, toLanguagePath: string) => {\r\n        navigate( currentPath.replace(new RegExp(`\\/${fromLanguagePath}\\/?$`), `\\/${toLanguagePath}`) );\r\n    }\r\n\r\n\r\n    return (\r\n        <nav\r\n            className={style.nav}\r\n        >\r\n            <Link\r\n                to='/'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/blog.png'\r\n                    alt='blog logo'\r\n                    title='SNinjo Blog'\r\n                    loading='eager'\r\n                />\r\n            </Link>\r\n            <a\r\n                href='https://SNinjo.com'\r\n                target='_blank'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/sninjo.png'\r\n                    alt='SNinjo logo'\r\n                    title='SNinjo Personal Website'\r\n                    loading='eager'\r\n                />\r\n            </a>\r\n            <a\r\n                href='https://SNinjo.com/contact'\r\n                target='_blank'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/email.png'\r\n                    alt='contact icon'\r\n                    title='Contact Information'\r\n                    loading='eager'\r\n                />\r\n            </a>\r\n\r\n            <select\r\n                defaultValue={getLanguage(currentPath, languages).path}\r\n\r\n                onChange={  event => navigateTo(getLanguage(currentPath, languages).path, event.target.value)  }\r\n            >\r\n                {\r\n                    languages.map((language, index) => (\r\n                        <option\r\n                            key={`Language${index}`}\r\n                            value={language.path}\r\n                        >\r\n                            {language.name}\r\n                        </option>\r\n                    ))\r\n                }\r\n            </select>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navigation;","// extracted by mini-css-extract-plugin\nexport var bottom = \"index-module--bottom--f3270\";\nexport var currentPath = \"index-module--currentPath--87fa4\";\nexport var link = \"index-module--link--2398e\";\nexport var nav = \"index-module--nav--88d41\";","import React, { FC } from 'react';\r\nimport { Link, useStaticQuery, graphql } from 'gatsby';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport Navigation from 'components/Navigation';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype QueriedData = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\ntype iProps = {\r\n    currentPath: string\r\n    contents: Array<{\r\n        title: string\r\n        depth: number\r\n        path: string\r\n    }>\r\n}\r\nconst Menu: FC<iProps> = ({ currentPath, contents: arrContents }) => {\r\n    const { site }: QueriedData = useStaticQuery(graphql`\r\n        query Menu {\r\n            site {\r\n                siteMetadata {\r\n                    languages {\r\n                        id\r\n                        path\r\n                        contents\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const language = getLanguage(currentPath, site.siteMetadata.languages);\r\n\r\n\r\n    return (\r\n        <nav\r\n            className={style.nav}\r\n        >\r\n            <Link\r\n                to={`/contents/${language.path}`}\r\n                className={style.link}\r\n            >\r\n                <span>{language.contents}</span>\r\n            </Link>\r\n            {\r\n                arrContents.map((contents, index) => (\r\n                    <Link\r\n                        key={`Link${index}`}\r\n                        to={contents.path}\r\n                        className={`${style.link} ${ currentPath.match(new RegExp(`${contents.path}[a-z]*\\/?$`))? style.currentPath : '' }`}\r\n                    >\r\n                        <span\r\n                            style={{paddingLeft: `${20 * contents.depth}px`}}\r\n                        >\r\n                            {contents.title}\r\n                        </span>\r\n                    </Link>\r\n                ))\r\n            }\r\n\r\n            <div\r\n                className={style.bottom}\r\n            >\r\n                <Navigation\r\n                    currentPath={currentPath}\r\n                />\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Menu;","import React, { FC } from 'react';\r\nimport { graphql, PageProps } from 'gatsby';\r\n\r\nimport Menu from 'components/Menu';\r\nimport SEO from 'components/SEO';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype DataProps = {\r\n    markdownRemark: {\r\n        html: string\r\n        fields: {\r\n            date: string\r\n        }\r\n        frontmatter: {\r\n            path: string\r\n            title: string\r\n        }\r\n    }\r\n    allMarkdownRemark: {\r\n        nodes: Array<{\r\n            frontmatter: {\r\n                title: string\r\n            }\r\n            fields: {\r\n                depth: number\r\n                path: string\r\n            }\r\n        }>\r\n    }\r\n}\r\nconst ArticleTemplate: FC<PageProps<DataProps>> = ({ data, location }) => {\r\n    const { markdownRemark: article } = data;\r\n    return (\r\n        <div\r\n            className={style.div}\r\n        >\r\n            <Menu\r\n                currentPath={location.pathname}\r\n                contents={\r\n                    data.allMarkdownRemark.nodes\r\n                        .map(node => ({\r\n                            title: node.frontmatter.title,\r\n                            depth: node.fields.depth,\r\n                            path: node.fields.path,\r\n                        }))\r\n                }\r\n            />\r\n\r\n            <section>\r\n                <div\r\n                    className={style.container}\r\n                >\r\n                    <header>\r\n                        <h1>{article.frontmatter.title}</h1>\r\n                        <h3>{article.fields.date}</h3>\r\n                    </header>\r\n                    <div\r\n                        className={style.article}\r\n                        dangerouslySetInnerHTML={{ __html: article.html }}\r\n                    />\r\n                </div>\r\n            </section>\r\n        </div>\r\n  )\r\n}\r\nexport default ArticleTemplate;\r\n\r\n\r\nexport const query = graphql`\r\n    query Article($id: String!, $regexContents: String!, $language: String!) {\r\n        markdownRemark(id: {eq: $id}) {\r\n            html\r\n            fields {\r\n                date\r\n            }\r\n            frontmatter {\r\n                title\r\n            }\r\n        }\r\n        allMarkdownRemark(\r\n            sort: [\r\n                {frontmatter: {order: ASC}},\r\n                {fields: {purePath: ASC}}\r\n            ]\r\n            filter: { fields: {\r\n                contents: {regex: $regexContents},\r\n                language: {eq: $language}\r\n            }}\r\n        ) {\r\n            nodes {\r\n                frontmatter {\r\n                    title\r\n                }\r\n                fields {\r\n                    depth\r\n                    path\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport const Head: FC<PageProps> = ({ location }) => (\r\n    <SEO\r\n        pathname={location.pathname}\r\n    />\r\n)","// extracted by mini-css-extract-plugin\nexport var article = \"index-module--article--d8571\";\nexport var bottom = \"index-module--bottom--9d00e\";\nexport var container = \"index-module--container--7de9d\";\nexport var currentPath = \"index-module--currentPath--3f4f6\";\nexport var div = \"index-module--div--a334b\";\nexport var link = \"index-module--link--42a5a\";\nexport var nav = \"index-module--nav--e1ac6\";","export type language = {\r\n    id: string,\r\n    name: string,\r\n    path: string,\r\n    contents: string,\r\n}\r\n\r\nexport function getLanguage(path: string, languages: Array<language>): language {\r\n    let defaultLanguage: language;\r\n    for (const language of languages) {\r\n        if (  !language.id || !language.path && (language.path !== '')  ) throw Error('Language configuration error, please add \"id\" and \"path\" in graphql')\r\n\r\n        if (language.id === 'en') defaultLanguage = language;\r\n        else if (path.match(new RegExp(`\\/${language.path}\\/?$`))) return language;\r\n    }\r\n    return defaultLanguage!;\r\n}"],"names":["img","_ref","currentPath","site","useStaticQuery","languages","siteMetadata","React","className","Link","to","style","StaticImage","src","alt","title","loading","href","target","defaultValue","getLanguage","path","onChange","event","navigateTo","fromLanguagePath","toLanguagePath","value","navigate","replace","RegExp","map","language","index","key","name","contents","arrContents","match","paddingLeft","depth","Navigation","data","location","markdownRemark","article","Menu","pathname","allMarkdownRemark","nodes","node","frontmatter","fields","date","dangerouslySetInnerHTML","__html","html","Head","_ref2","SEO","defaultLanguage","id","Error"],"sourceRoot":""}