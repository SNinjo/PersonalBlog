{"version":3,"file":"component---src-templates-contents-index-tsx-fde7ab75d709f07ad2f1.js","mappings":"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","sources":["webpack://SNinjo Blog/./src/components/Navigation/index.module.scss","webpack://SNinjo Blog/./src/components/Navigation/index.tsx","webpack://SNinjo Blog/./src/components/SEO/index.tsx","webpack://SNinjo Blog/./src/templates/Contents/index.tsx","webpack://SNinjo Blog/./src/templates/Contents/index.module.scss","webpack://SNinjo Blog/./src/tools/Language/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var img = \"index-module--img--50e58\";\nexport var link = \"index-module--link--490a4\";\nexport var nav = \"index-module--nav--287f4\";","import React, { FC } from 'react';\r\nimport { Link, useStaticQuery, graphql, navigate } from 'gatsby';\r\nimport { StaticImage } from 'gatsby-plugin-image';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype QueriedData = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = {\r\n    currentPath: string\r\n}\r\nconst Navigation: FC<Props> = ({ currentPath }) => {\r\n    const { site }: QueriedData = useStaticQuery(graphql`\r\n        query Navigation {\r\n            site {\r\n                siteMetadata {\r\n                    languages {\r\n                        id\r\n                        name\r\n                        path\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const languages = site.siteMetadata.languages;\r\n\r\n    const navigateTo = (fromLanguagePath: string, toLanguagePath: string) => {\r\n        navigate( currentPath.replace(new RegExp(`\\/${fromLanguagePath}\\/?$`), `\\/${toLanguagePath}`) );\r\n    }\r\n\r\n\r\n    return (\r\n        <nav\r\n            className={style.nav}\r\n        >\r\n            <Link\r\n                to='/'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/blog.png'\r\n                    alt='blog logo'\r\n                    title='SNinjo Blog'\r\n                    loading='eager'\r\n                />\r\n            </Link>\r\n            <a\r\n                href='https://SNinjo.com'\r\n                target='_blank'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/sninjo.png'\r\n                    alt='SNinjo logo'\r\n                    title='SNinjo Personal Website'\r\n                    loading='eager'\r\n                />\r\n            </a>\r\n            <a\r\n                href='https://SNinjo.com/contact'\r\n                target='_blank'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/email.png'\r\n                    alt='contact icon'\r\n                    title='Contact Information'\r\n                    loading='eager'\r\n                />\r\n            </a>\r\n\r\n            <select\r\n                defaultValue={getLanguage(currentPath, languages).path}\r\n\r\n                onChange={  event => navigateTo(getLanguage(currentPath, languages).path, event.target.value)  }\r\n            >\r\n                {\r\n                    languages.map((language, index) => (\r\n                        <option\r\n                            key={`Language${index}`}\r\n                            value={language.path}\r\n                        >\r\n                            {language.name}\r\n                        </option>\r\n                    ))\r\n                }\r\n            </select>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navigation;","import React, { FC } from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\n\r\n\r\ntype Props = {\r\n    title: string\r\n    pathname: string\r\n}\r\n\r\nconst SEO: FC<Props> = ({ title, pathname }) => {\r\n    const { site } = useStaticQuery(graphql`\r\n        query SEO {\r\n            site {\r\n                siteMetadata {\r\n                    title\r\n                    description\r\n                    author\r\n                    image\r\n                    siteUrl\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const { title: defaultTitle, description, author, imagePath, siteUrl } = site.siteMetadata;\r\n    const url = `${siteUrl}${pathname}`;\r\n    const image = `${siteUrl}${imagePath}`;\r\n\r\n\r\n    return (\r\n        <>\r\n            <title>{`${title? `${title} | ` : ''}${defaultTitle}`}</title>\r\n            <link rel='canonical' href={url} />\r\n\r\n            <meta name=\"description\" content={description} />\r\n            <meta name=\"image\" content={image} />\r\n\r\n            <meta name='og:title' content={title} />\r\n            <meta name='og:description' content={description} />\r\n            <meta name='og:image' content={image} />\r\n            <meta name='og:type' content='website' />\r\n            <meta name='og:url' content={url} />\r\n            <meta name='og:site_name' content={title} />\r\n            \r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n            <meta name=\"twitter:title\" content={title} />\r\n            <meta name=\"twitter:url\" content={url} />\r\n            <meta name=\"twitter:description\" content={description} />\r\n            <meta name=\"twitter:image\" content={image} />\r\n            {/* <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\r\n        </>\r\n    )\r\n}\r\nexport default SEO;","import React, { FC } from 'react';\r\nimport { graphql, Link, PageProps } from 'gatsby';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport Navigation from 'components/Navigation';\r\nimport SEO from 'components/SEO';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype DataProps = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n    allMarkdownRemark: {\r\n        nodes: Array<{\r\n            fields: {\r\n                contents: string\r\n                isRoot: boolean\r\n                language: string\r\n                path: string\r\n            }\r\n            frontmatter: {\r\n                title: string\r\n            }\r\n        }>\r\n    }\r\n}\r\n\r\nconst ContentsTemplate: FC<PageProps<DataProps>> = ({ data, location }) => {\r\n    return (\r\n        <div\r\n            className={style.div}\r\n        >\r\n            <h1>{  getLanguage(location.pathname, data.site.siteMetadata.languages).contents  }</h1>\r\n            <nav\r\n                className={style.contents}\r\n            >\r\n                {\r\n                    data.allMarkdownRemark.nodes\r\n                        .filter(node => node.fields.isRoot)\r\n                        .map((node, index) => (\r\n                            <Link\r\n                                key={`Link${index}`}\r\n                                to={`${node.fields.path}`}\r\n                                className={style.link}\r\n                            >\r\n                                <span>{node.frontmatter.title}</span>\r\n                                <span\r\n                                    className={style.articleQuantity}\r\n                                >\r\n                                    {\r\n                                        data.allMarkdownRemark.nodes\r\n                                            .filter(article => (article.fields.contents === node.fields.contents))\r\n                                            .length\r\n                                    }\r\n                                </span>\r\n                            </Link>\r\n                        ))\r\n                }\r\n            </nav>\r\n\r\n            <Navigation\r\n                currentPath={location.pathname}\r\n            />\r\n        </div>\r\n  )\r\n}\r\nexport default ContentsTemplate;\r\n\r\nexport const Head: FC<PageProps<DataProps>> = ({ data, location }) => (\r\n    <SEO\r\n        title={  getLanguage(location.pathname, data.site.siteMetadata.languages).contents  }\r\n        pathname={location.pathname}\r\n    />\r\n)\r\n\r\n\r\nexport const query = graphql`\r\n    query Contents($language: String!) {\r\n        site {\r\n            siteMetadata {\r\n                languages {\r\n                    id\r\n                    path\r\n                    contents\r\n                }\r\n            }\r\n        }\r\n        allMarkdownRemark(\r\n            filter: {fields: {language: {eq: $language}}}\r\n            sort: {frontmatter: {order: ASC}}\r\n        ) {\r\n            nodes {\r\n                fields {\r\n                    contents\r\n                    isRoot\r\n                    language\r\n                    path\r\n                }\r\n                frontmatter {\r\n                    title\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n","// extracted by mini-css-extract-plugin\nexport var articleQuantity = \"index-module--articleQuantity--a7d6c\";\nexport var contents = \"index-module--contents--9c479\";\nexport var div = \"index-module--div--a06d1\";\nexport var link = \"index-module--link--7b0da\";","export type language = {\r\n    id: string,\r\n    name: string,\r\n    path: string,\r\n    contents: string,\r\n}\r\n\r\nexport function getLanguage(path: string, languages: Array<language>): language {\r\n    let defaultLanguage: language;\r\n    for (const language of languages) {\r\n        if (  !language.id || !language.path && (language.path !== '')  ) throw Error('Language configuration error, please add \"id\" and \"path\" in graphql')\r\n\r\n        if (language.id === 'en') defaultLanguage = language;\r\n        else if (path.match(new RegExp(`\\/${language.path}\\/?$`))) return language;\r\n    }\r\n    return defaultLanguage!;\r\n}"],"names":["img","_ref","currentPath","site","useStaticQuery","languages","siteMetadata","React","className","Link","to","style","StaticImage","src","alt","title","loading","href","target","defaultValue","getLanguage","path","onChange","event","navigateTo","fromLanguagePath","toLanguagePath","value","navigate","replace","RegExp","map","language","index","key","name","pathname","defaultTitle","description","author","imagePath","siteUrl","url","image","rel","content","data","location","contents","allMarkdownRemark","nodes","filter","node","fields","isRoot","frontmatter","article","length","Navigation","Head","_ref2","SEO","defaultLanguage","id","Error","match"],"sourceRoot":""}