{"version":3,"file":"component---src-templates-contents-index-tsx-e96bec122cd753e6b13a.js","mappings":"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","sources":["webpack://SNinjo Blog/./src/components/Copyright/index.tsx","webpack://SNinjo Blog/./src/components/Copyright/index.module.scss","webpack://SNinjo Blog/./src/components/Navigation/index.module.scss","webpack://SNinjo Blog/./src/components/Navigation/index.tsx","webpack://SNinjo Blog/./src/components/SEO/index.tsx","webpack://SNinjo Blog/./src/templates/Contents/index.tsx","webpack://SNinjo Blog/./src/templates/Contents/index.module.scss","webpack://SNinjo Blog/./src/tools/Language/index.ts"],"sourcesContent":["import React, { FC } from 'react';\r\nimport { Link, useStaticQuery, graphql } from 'gatsby';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype QueriedData = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = {\r\n    currentPath: string\r\n}\r\nconst Copyright: FC<Props> = ({ currentPath }) => {\r\n    const { site }: QueriedData = useStaticQuery(graphql`\r\n        query Copyright {\r\n            site {\r\n                siteMetadata {\r\n                    languages {\r\n                        id\r\n                        name\r\n                        path\r\n\t\t\t\t\t\tcopyright\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const languages = site.siteMetadata.languages;\r\n\r\n    return (\r\n        <Link\r\n            to={`/Preface/Copyright${getLanguage(currentPath, languages).path}`}\r\n            className={style.link}\r\n        >\r\n            <p>{getLanguage(currentPath, languages).copyright}</p>\r\n        </Link>\r\n    )\r\n}\r\nexport default Copyright;","// extracted by mini-css-extract-plugin\nexport var link = \"index-module--link--288ba\";","// extracted by mini-css-extract-plugin\nexport var image = \"index-module--image--d7c14\";\nexport var link = \"index-module--link--490a4\";\nexport var nav = \"index-module--nav--287f4\";","import React, { FC } from 'react';\r\nimport { Link, useStaticQuery, graphql, navigate } from 'gatsby';\r\nimport { StaticImage } from 'gatsby-plugin-image';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport * as style from './index.module.scss';\r\nimport Copyright from '../Copyright';\r\n\r\n\r\ntype QueriedData = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = {\r\n    currentPath: string\r\n}\r\nconst Navigation: FC<Props> = ({ currentPath }) => {\r\n    const { site }: QueriedData = useStaticQuery(graphql`\r\n        query Navigation {\r\n            site {\r\n                siteMetadata {\r\n                    languages {\r\n                        id\r\n                        name\r\n                        path\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const languages = site.siteMetadata.languages;\r\n\r\n    const navigateTo = (fromLanguagePath: string, toLanguagePath: string) => {\r\n        navigate( currentPath.replace(new RegExp(`${fromLanguagePath}$`), toLanguagePath) );\r\n    }\r\n\r\n\r\n    return (\r\n        <nav\r\n            className={style.nav}\r\n        >\r\n\t\t\t<div>\r\n\t\t\t\t<a\r\n\t\t\t\t\thref='https://SNinjo.com'\r\n\t\t\t\t\ttarget='_blank'\r\n\t\t\t\t\tclassName={style.link}\r\n\t\t\t\t>\r\n\t\t\t\t\t<StaticImage\r\n\t\t\t\t\t\tclassName={style.image}\r\n\t\t\t\t\t\tsrc='../../images/sninjo.png'\r\n\t\t\t\t\t\talt='SNinjo logo'\r\n\t\t\t\t\t\ttitle='SNinjo Personal Website'\r\n\t\t\t\t\t\tloading='eager'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</a>\r\n\t\t\t\t<Link\r\n\t\t\t\t\tto='/'\r\n\t\t\t\t\tclassName={style.link}\r\n\t\t\t\t>\r\n\t\t\t\t\t<StaticImage\r\n\t\t\t\t\t\tclassName={style.image}\r\n\t\t\t\t\t\tsrc='../../images/blog.png'\r\n\t\t\t\t\t\talt='SNinjo Blog'\r\n\t\t\t\t\t\ttitle='SNinjo Blog'\r\n\t\t\t\t\t\tloading='eager'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Link>\r\n\t\t\t\t<a\r\n\t\t\t\t\thref='https://tool.SNinjo.com'\r\n\t\t\t\t\ttarget='_blank'\r\n\t\t\t\t\tclassName={style.link}\r\n\t\t\t\t>\r\n\t\t\t\t\t<StaticImage\r\n\t\t\t\t\t\tclassName={style.image}\r\n\t\t\t\t\t\tsrc='../../images/tool.png'\r\n\t\t\t\t\t\talt='SNinjo Tool'\r\n\t\t\t\t\t\ttitle='SNinjo Tool'\r\n\t\t\t\t\t\tloading='eager'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</a>\r\n\t\t\t\t<a\r\n\t\t\t\t\thref='https://SNinjo.com/contact'\r\n\t\t\t\t\ttarget='_blank'\r\n\t\t\t\t\tclassName={style.link}\r\n\t\t\t\t>\r\n\t\t\t\t\t<StaticImage\r\n\t\t\t\t\t\tclassName={style.image}\r\n\t\t\t\t\t\tsrc='../../images/email.png'\r\n\t\t\t\t\t\talt='contact icon'\r\n\t\t\t\t\t\ttitle='Contact Information'\r\n\t\t\t\t\t\tloading='eager'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</a>\r\n\r\n\t\t\t\t<select\r\n\t\t\t\t\tdefaultValue={getLanguage(currentPath, languages).path}\r\n\r\n\t\t\t\t\tonChange={  event => navigateTo(getLanguage(currentPath, languages).path, event.target.value)  }\r\n\t\t\t\t>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlanguages.map((language, index) => (\r\n\t\t\t\t\t\t\t<option\r\n\t\t\t\t\t\t\t\tkey={`Language${index}`}\r\n\t\t\t\t\t\t\t\tvalue={language.path}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{language.name}\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t\t<Copyright\r\n\t\t\t\tcurrentPath={currentPath}\r\n\t\t\t/>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navigation;","import React, { FC } from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\n\r\n\r\ntype Props = {\r\n    title: string\r\n    pathname: string\r\n}\r\n\r\nconst SEO: FC<Props> = ({ title: subtitle, pathname }) => {\r\n    const { site } = useStaticQuery(graphql`\r\n        query SEO {\r\n            site {\r\n                siteMetadata {\r\n                    title\r\n                    description\r\n                    author\r\n                    image\r\n                    siteUrl\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const { title: mainTitle, description, author, image: imagePath, siteUrl } = site.siteMetadata;\r\n    const title = `${subtitle? `${subtitle} | ` : ''}${mainTitle}`;\r\n    const url = `${siteUrl}${pathname}`;\r\n    const image = `${siteUrl}/${imagePath}`;\r\n\r\n\r\n    return (\r\n        <>\r\n            <title>{title}</title>\r\n            <link rel='canonical' href={url} />\r\n\r\n            <meta name=\"description\" content={description} />\r\n            <meta name=\"image\" content={image} />\r\n\r\n            <meta name='og:title' content={title} />\r\n            <meta name='og:description' content={description} />\r\n            <meta name='og:image' content={image} />\r\n            <meta name='og:type' content='website' />\r\n            <meta name='og:url' content={url} />\r\n            <meta name='og:site_name' content={mainTitle} />\r\n            \r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n            <meta name=\"twitter:title\" content={title} />\r\n            <meta name=\"twitter:url\" content={url} />\r\n            <meta name=\"twitter:description\" content={description} />\r\n            <meta name=\"twitter:image\" content={image} />\r\n            {/* <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\r\n        </>\r\n    )\r\n}\r\nexport default SEO;","import React, { FC } from 'react';\r\nimport { graphql, Link, PageProps } from 'gatsby';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport Layout from 'components/Layout';\r\nimport Navigation from 'components/Navigation';\r\nimport SEO from 'components/SEO';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype DataProps = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n    allMdx: {\r\n        nodes: Array<{\r\n            fields: {\r\n                contents: string\r\n                isRoot: boolean\r\n                language: string\r\n                path: string\r\n            }\r\n            frontmatter: {\r\n                title: string\r\n            }\r\n        }>\r\n    }\r\n}\r\n\r\nconst ContentsTemplate: FC<PageProps<DataProps>> = ({ data, location }) => {\r\n    let language = getLanguage(location.pathname, data.site.siteMetadata.languages);\r\n\r\n\r\n    return (\r\n        <Layout\r\n            language={language.id}\r\n        >\r\n            <div\r\n                className={style.div}\r\n            >\r\n                <h1>{  language.contents  }</h1>\r\n                <nav\r\n                    className={style.contents}\r\n                >\r\n                    {\r\n                        data.allMdx.nodes\r\n                            .filter(node => node.fields.isRoot)\r\n                            .map((node, index) => (\r\n                                <Link\r\n                                    key={`Link${index}`}\r\n                                    to={`${node.fields.path}`}\r\n                                    className={style.link}\r\n                                >\r\n                                    <span>{node.frontmatter.title}</span>\r\n                                    <span\r\n                                        className={style.articleQuantity}\r\n                                    >\r\n                                        {\r\n                                            data.allMdx.nodes\r\n                                                .filter(article => (article.fields.contents === node.fields.contents))\r\n                                                .length\r\n                                        }\r\n                                    </span>\r\n                                </Link>\r\n                            ))\r\n                    }\r\n                </nav>\r\n                \r\n                <footer>\r\n\t\t\t\t\t<Navigation\r\n\t\t\t\t\t\tcurrentPath={location.pathname}\r\n\t\t\t\t\t/>\r\n                </footer>\r\n            </div>\r\n        </Layout>\r\n  )\r\n}\r\nexport default ContentsTemplate;\r\n\r\nexport const Head: FC<PageProps<DataProps>> = ({ data, location }) => (\r\n    <SEO\r\n        title={  getLanguage(location.pathname, data.site.siteMetadata.languages).contents  }\r\n        pathname={location.pathname}\r\n    />\r\n)\r\n\r\n\r\nexport const query = graphql`\r\n    query Contents($language: String!) {\r\n        site {\r\n            siteMetadata {\r\n                languages {\r\n                    id\r\n                    path\r\n                    contents\r\n                }\r\n            }\r\n        }\r\n        allMdx(\r\n            filter: {fields: {language: {eq: $language}}}\r\n            sort: {frontmatter: {order: ASC}}\r\n        ) {\r\n            nodes {\r\n                fields {\r\n                    contents\r\n                    isRoot\r\n                    language\r\n                    path\r\n                }\r\n                frontmatter {\r\n                    title\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n","// extracted by mini-css-extract-plugin\nexport var articleQuantity = \"index-module--articleQuantity--a7d6c\";\nexport var contents = \"index-module--contents--9c479\";\nexport var div = \"index-module--div--a06d1\";\nexport var link = \"index-module--link--7b0da\";","export type language = {\r\n    id: string,\r\n    name: string,\r\n    path: string,\r\n    contents: string,\r\n\theadline: string,\r\n\tcopyright: string,\r\n    notMatch: string,\r\n}\r\n\r\nexport function getLanguage(path: string, languages: Array<language>): language {\r\n    let defaultLanguage: language;\r\n    for (const language of languages) {\r\n        if (  !language.id || !language.path && (language.path !== '')  ) throw Error('Language configuration error, please add \"id\" and \"path\" in graphql')\r\n\r\n        if (language.id === 'en') defaultLanguage = language;\r\n        else if (path.match(new RegExp(`${language.path}$`))) return language;\r\n    }\r\n    return defaultLanguage!;\r\n}"],"names":["_ref","currentPath","site","useStaticQuery","languages","siteMetadata","React","Link","to","getLanguage","path","className","copyright","href","target","style","StaticImage","src","alt","title","loading","defaultValue","onChange","event","navigateTo","fromLanguagePath","toLanguagePath","value","navigate","replace","RegExp","map","language","index","key","name","Copyright","subtitle","pathname","mainTitle","description","author","image","imagePath","siteUrl","url","rel","content","data","location","Layout","id","contents","allMdx","nodes","filter","node","fields","isRoot","frontmatter","article","length","Navigation","Head","_ref2","SEO","defaultLanguage","Error","match"],"sourceRoot":""}