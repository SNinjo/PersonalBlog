{"version":3,"file":"component---src-pages-404-index-tsx-f5da49138c5bfad23e00.js","mappings":"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","sources":["webpack://SNinjo Blog/./src/components/Navigation/index.module.scss","webpack://SNinjo Blog/./src/components/Navigation/index.tsx","webpack://SNinjo Blog/./src/components/SEO/index.tsx","webpack://SNinjo Blog/./src/pages/404/index.tsx","webpack://SNinjo Blog/./src/pages/404/index.module.scss","webpack://SNinjo Blog/./src/tools/Language/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var img = \"index-module--img--50e58\";\nexport var link = \"index-module--link--490a4\";\nexport var nav = \"index-module--nav--287f4\";","import React, { FC } from 'react';\r\nimport { Link, useStaticQuery, graphql, navigate } from 'gatsby';\r\nimport { StaticImage } from 'gatsby-plugin-image';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype QueriedData = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = {\r\n    currentPath: string\r\n}\r\nconst Navigation: FC<Props> = ({ currentPath }) => {\r\n    const { site }: QueriedData = useStaticQuery(graphql`\r\n        query Navigation {\r\n            site {\r\n                siteMetadata {\r\n                    languages {\r\n                        id\r\n                        name\r\n                        path\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const languages = site.siteMetadata.languages;\r\n\r\n    const navigateTo = (fromLanguagePath: string, toLanguagePath: string) => {\r\n        navigate( currentPath.replace(new RegExp(`\\/${fromLanguagePath}\\/?$`), `\\/${toLanguagePath}`) );\r\n    }\r\n\r\n\r\n    return (\r\n        <nav\r\n            className={style.nav}\r\n        >\r\n            <Link\r\n                to='/'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/blog.png'\r\n                    alt='blog logo'\r\n                    title='SNinjo Blog'\r\n                    loading='eager'\r\n                />\r\n            </Link>\r\n            <a\r\n                href='https://SNinjo.com'\r\n                target='_blank'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/sninjo.png'\r\n                    alt='SNinjo logo'\r\n                    title='SNinjo Personal Website'\r\n                    loading='eager'\r\n                />\r\n            </a>\r\n            <a\r\n                href='https://SNinjo.com/contact'\r\n                target='_blank'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/email.png'\r\n                    alt='contact icon'\r\n                    title='Contact Information'\r\n                    loading='eager'\r\n                />\r\n            </a>\r\n\r\n            <select\r\n                defaultValue={getLanguage(currentPath, languages).path}\r\n\r\n                onChange={  event => navigateTo(getLanguage(currentPath, languages).path, event.target.value)  }\r\n            >\r\n                {\r\n                    languages.map((language, index) => (\r\n                        <option\r\n                            key={`Language${index}`}\r\n                            value={language.path}\r\n                        >\r\n                            {language.name}\r\n                        </option>\r\n                    ))\r\n                }\r\n            </select>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navigation;","import React, { FC } from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\n\r\n\r\ntype Props = {\r\n    title: string\r\n    pathname: string\r\n}\r\n\r\nconst SEO: FC<Props> = ({ title: subtitle, pathname }) => {\r\n    const { site } = useStaticQuery(graphql`\r\n        query SEO {\r\n            site {\r\n                siteMetadata {\r\n                    title\r\n                    description\r\n                    author\r\n                    image\r\n                    siteUrl\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const { title: mainTitle, description, author, image: imagePath, siteUrl } = site.siteMetadata;\r\n    const title = `${subtitle? `${subtitle} | ` : ''}${mainTitle}`;\r\n    const url = `${siteUrl}${pathname}`;\r\n    const image = `${siteUrl}${imagePath}`;\r\n\r\n\r\n    return (\r\n        <>\r\n            <title>{title}</title>\r\n            <link rel='canonical' href={url} />\r\n\r\n            <meta name=\"description\" content={description} />\r\n            <meta name=\"image\" content={image} />\r\n\r\n            <meta name='og:title' content={title} />\r\n            <meta name='og:description' content={description} />\r\n            <meta name='og:image' content={image} />\r\n            <meta name='og:type' content='website' />\r\n            <meta name='og:url' content={url} />\r\n            <meta name='og:site_name' content={mainTitle} />\r\n            \r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n            <meta name=\"twitter:title\" content={title} />\r\n            <meta name=\"twitter:url\" content={url} />\r\n            <meta name=\"twitter:description\" content={description} />\r\n            <meta name=\"twitter:image\" content={image} />\r\n            {/* <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\r\n        </>\r\n    )\r\n}\r\nexport default SEO;","import React, { FC } from 'react';\r\nimport { graphql, PageProps } from 'gatsby';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport Navigation from '../../components/Navigation';\r\nimport SEO from 'components/SEO';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype DataProps = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\nconst NotMatchPage: FC<PageProps<DataProps>> = ({ data, location }) => {\r\n    return (\r\n        <div\r\n            className={style.div}\r\n        >\r\n            <div>\r\n                <div\r\n                    dangerouslySetInnerHTML={{ __html: getLanguage(location.pathname, data.site.siteMetadata.languages).notMatch }}\r\n                />\r\n\r\n                <section>\r\n                    <Navigation\r\n                        currentPath={location.pathname}\r\n                    />\r\n                </section>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default NotMatchPage;\r\n\r\nexport const Head: FC<PageProps> = ({ location }) => (\r\n    <SEO\r\n        pathname={location.pathname}\r\n    />\r\n)\r\n\r\n\r\nexport const query = graphql`\r\n    query NotMatch {\r\n        site {\r\n            siteMetadata {\r\n                languages {\r\n                    id\r\n                    path\r\n                    notMatch\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n","// extracted by mini-css-extract-plugin\nexport var div = \"index-module--div--f7148\";","export type language = {\r\n    id: string,\r\n    name: string,\r\n    path: string,\r\n    contents: string,\r\n    notMatch: string,\r\n}\r\n\r\nexport function getLanguage(path: string, languages: Array<language>): language {\r\n    let defaultLanguage: language;\r\n    for (const language of languages) {\r\n        if (  !language.id || !language.path && (language.path !== '')  ) throw Error('Language configuration error, please add \"id\" and \"path\" in graphql')\r\n\r\n        if (language.id === 'en') defaultLanguage = language;\r\n        else if (path.match(new RegExp(`\\/${language.path}\\/?$`))) return language;\r\n    }\r\n    return defaultLanguage!;\r\n}"],"names":["img","_ref","currentPath","site","useStaticQuery","languages","siteMetadata","React","className","Link","to","style","StaticImage","src","alt","title","loading","href","target","defaultValue","getLanguage","path","onChange","event","navigateTo","fromLanguagePath","toLanguagePath","value","navigate","replace","RegExp","map","language","index","key","name","subtitle","pathname","mainTitle","description","author","image","imagePath","siteUrl","url","rel","content","data","location","dangerouslySetInnerHTML","__html","notMatch","Navigation","Head","_ref2","SEO","defaultLanguage","id","Error","match"],"sourceRoot":""}