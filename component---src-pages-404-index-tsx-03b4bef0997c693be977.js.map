{"version":3,"file":"component---src-pages-404-index-tsx-03b4bef0997c693be977.js","mappings":"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","sources":["webpack://SNinjo Blog/./src/components/Copyright/index.tsx","webpack://SNinjo Blog/./src/components/Copyright/index.module.scss","webpack://SNinjo Blog/./src/components/Navigation/index.module.scss","webpack://SNinjo Blog/./src/components/Navigation/index.tsx","webpack://SNinjo Blog/./src/components/SEO/index.tsx","webpack://SNinjo Blog/./src/pages/404/index.tsx","webpack://SNinjo Blog/./src/pages/404/index.module.scss","webpack://SNinjo Blog/./src/tools/Language/index.ts"],"sourcesContent":["import React, { FC } from 'react';\r\nimport { Link, useStaticQuery, graphql } from 'gatsby';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype QueriedData = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = {\r\n    currentPath: string\r\n}\r\nconst Copyright: FC<Props> = ({ currentPath }) => {\r\n    const { site }: QueriedData = useStaticQuery(graphql`\r\n        query Copyright {\r\n            site {\r\n                siteMetadata {\r\n                    languages {\r\n                        id\r\n                        name\r\n                        path\r\n\t\t\t\t\t\tcopyright\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const languages = site.siteMetadata.languages;\r\n\r\n    return (\r\n        <Link\r\n            to={`/Preface/Copyright${getLanguage(currentPath, languages).path}`}\r\n            className={style.link}\r\n        >\r\n            <p>{getLanguage(currentPath, languages).copyright}</p>\r\n        </Link>\r\n    )\r\n}\r\nexport default Copyright;","// extracted by mini-css-extract-plugin\nexport var link = \"index-module--link--288ba\";","// extracted by mini-css-extract-plugin\nexport var image = \"index-module--image--d7c14\";\nexport var link = \"index-module--link--490a4\";\nexport var nav = \"index-module--nav--287f4\";","import React, { FC } from 'react';\r\nimport { Link, useStaticQuery, graphql, navigate } from 'gatsby';\r\nimport { StaticImage } from 'gatsby-plugin-image';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype QueriedData = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = {\r\n    currentPath: string\r\n}\r\nconst Navigation: FC<Props> = ({ currentPath }) => {\r\n    const { site }: QueriedData = useStaticQuery(graphql`\r\n        query Navigation {\r\n            site {\r\n                siteMetadata {\r\n                    languages {\r\n                        id\r\n                        name\r\n                        path\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const languages = site.siteMetadata.languages;\r\n\r\n    const navigateTo = (fromLanguagePath: string, toLanguagePath: string) => {\r\n        navigate( currentPath.replace(new RegExp(`${fromLanguagePath}$`), toLanguagePath) );\r\n    }\r\n\r\n\r\n    return (\r\n        <nav\r\n            className={style.nav}\r\n        >\r\n            <Link\r\n                to='/'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.image}\r\n                    src='../../images/blog.png'\r\n                    alt='blog logo'\r\n                    title='SNinjo Blog'\r\n                    loading='eager'\r\n                />\r\n            </Link>\r\n            <a\r\n                href='https://SNinjo.com'\r\n                target='_blank'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.image}\r\n                    src='../../images/sninjo.png'\r\n                    alt='SNinjo logo'\r\n                    title='SNinjo Personal Website'\r\n                    loading='eager'\r\n                />\r\n            </a>\r\n            <a\r\n                href='https://SNinjo.com/contact'\r\n                target='_blank'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.image}\r\n                    src='../../images/email.png'\r\n                    alt='contact icon'\r\n                    title='Contact Information'\r\n                    loading='eager'\r\n                />\r\n            </a>\r\n\r\n            <select\r\n                defaultValue={getLanguage(currentPath, languages).path}\r\n\r\n                onChange={  event => navigateTo(getLanguage(currentPath, languages).path, event.target.value)  }\r\n            >\r\n                {\r\n                    languages.map((language, index) => (\r\n                        <option\r\n                            key={`Language${index}`}\r\n                            value={language.path}\r\n                        >\r\n                            {language.name}\r\n                        </option>\r\n                    ))\r\n                }\r\n            </select>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navigation;","import React, { FC } from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\n\r\n\r\ntype Props = {\r\n    title: string\r\n    pathname: string\r\n}\r\n\r\nconst SEO: FC<Props> = ({ title: subtitle, pathname }) => {\r\n    const { site } = useStaticQuery(graphql`\r\n        query SEO {\r\n            site {\r\n                siteMetadata {\r\n                    title\r\n                    description\r\n                    author\r\n                    image\r\n                    siteUrl\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const { title: mainTitle, description, author, image: imagePath, siteUrl } = site.siteMetadata;\r\n    const title = `${subtitle? `${subtitle} | ` : ''}${mainTitle}`;\r\n    const url = `${siteUrl}${pathname}`;\r\n    const image = `${siteUrl}${imagePath}`;\r\n\r\n\r\n    return (\r\n        <>\r\n            <title>{title}</title>\r\n            <link rel='canonical' href={url} />\r\n\r\n            <meta name=\"description\" content={description} />\r\n            <meta name=\"image\" content={image} />\r\n\r\n            <meta name='og:title' content={title} />\r\n            <meta name='og:description' content={description} />\r\n            <meta name='og:image' content={image} />\r\n            <meta name='og:type' content='website' />\r\n            <meta name='og:url' content={url} />\r\n            <meta name='og:site_name' content={mainTitle} />\r\n            \r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n            <meta name=\"twitter:title\" content={title} />\r\n            <meta name=\"twitter:url\" content={url} />\r\n            <meta name=\"twitter:description\" content={description} />\r\n            <meta name=\"twitter:image\" content={image} />\r\n            {/* <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\r\n        </>\r\n    )\r\n}\r\nexport default SEO;","import React, { FC } from 'react';\r\nimport { graphql, PageProps } from 'gatsby';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport Layout from 'components/Layout';\r\nimport Navigation from '../../components/Navigation';\r\nimport Copyright from 'components/Copyright';\r\nimport SEO from 'components/SEO';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype DataProps = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\nconst NotMatchPage: FC<PageProps<DataProps>> = ({ data, location }) => {\r\n    let language = getLanguage(location.pathname, data.site.siteMetadata.languages);\r\n\r\n\r\n    return (\r\n        <Layout\r\n            language={language.id}\r\n        >\r\n            <div\r\n                className={style.div}\r\n            >\r\n                <div>\r\n                    <div\r\n                        dangerouslySetInnerHTML={{ __html: language.notMatch }}\r\n                    />\r\n\r\n                    <section>\r\n                        <Navigation\r\n                            currentPath={location.pathname}\r\n                        />\r\n                    </section>\r\n\r\n                </div>\r\n                <Copyright\r\n\t\t\t\t\tcurrentPath={location.pathname}\r\n\t\t\t\t/>\r\n            </div>\r\n        </Layout>\r\n    )\r\n}\r\nexport default NotMatchPage;\r\n\r\nexport const Head: FC<PageProps> = ({ location }) => (\r\n    <SEO\r\n        pathname={location.pathname}\r\n    />\r\n)\r\n\r\n\r\nexport const query = graphql`\r\n    query NotMatch {\r\n        site {\r\n            siteMetadata {\r\n                languages {\r\n                    id\r\n                    path\r\n                    notMatch\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n","// extracted by mini-css-extract-plugin\nexport var div = \"index-module--div--f7148\";","export type language = {\r\n    id: string,\r\n    name: string,\r\n    path: string,\r\n    contents: string,\r\n\theadline: string,\r\n\tcopyright: string,\r\n    notMatch: string,\r\n}\r\n\r\nexport function getLanguage(path: string, languages: Array<language>): language {\r\n    let defaultLanguage: language;\r\n    for (const language of languages) {\r\n        if (  !language.id || !language.path && (language.path !== '')  ) throw Error('Language configuration error, please add \"id\" and \"path\" in graphql')\r\n\r\n        if (language.id === 'en') defaultLanguage = language;\r\n        else if (path.match(new RegExp(`${language.path}$`))) return language;\r\n    }\r\n    return defaultLanguage!;\r\n}"],"names":["_ref","currentPath","site","useStaticQuery","languages","siteMetadata","React","Link","to","getLanguage","path","className","copyright","style","StaticImage","src","alt","title","loading","href","target","defaultValue","onChange","event","navigateTo","fromLanguagePath","toLanguagePath","value","navigate","replace","RegExp","map","language","index","key","name","subtitle","pathname","mainTitle","description","author","image","imagePath","siteUrl","url","rel","content","data","location","Layout","id","dangerouslySetInnerHTML","__html","notMatch","Navigation","Copyright","Head","_ref2","SEO","defaultLanguage","Error","match"],"sourceRoot":""}