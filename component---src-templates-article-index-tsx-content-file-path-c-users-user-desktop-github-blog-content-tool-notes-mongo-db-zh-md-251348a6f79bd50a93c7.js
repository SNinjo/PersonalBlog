"use strict";(self.webpackChunkSNinjo_Blog=self.webpackChunkSNinjo_Blog||[]).push([[9770],{4435:function(e,n,l){l.r(n),l.d(n,{Head:function(){return f},default:function(){return b}});var t=l(1151),a=l(7294);function r(e){const n=Object.assign({p:"p",br:"br",a:"a",h1:"h1",ul:"ul",li:"li",pre:"pre",code:"code",h3:"h3",ol:"ol"},(0,t.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"MongoDB 使用的是文件導向的儲存概念，是一種靈活、易於擴展、高效能的NoSQL資料庫，它提供了可以跟SQL相比的 Query Language，同時也是 Open Source 的NoSQL DB，本身用 C++ 語言撰寫而成，在許多場景下可用於替代傳統的關聯式資料庫儲存方式。",a.createElement(n.br),"\n",a.createElement(n.a,{href:"https://www.mongodb.com/docs/manual/introduction/"},"查看更多介紹")),"\n",a.createElement(n.h1,null,"CLI 指令"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"進入 CLI","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"mongosh\n")),"\n","指定資料庫參數","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"mongosh \\\r\n    --host <host> \\\r\n    --port <port> \\\r\n    --username <username> \\\r\n    --authenticationDatabase <database name>\n")),"\n"),"\n"),"\n",a.createElement(n.h1,null,"資料庫"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"取得目前使用的資料庫","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db\n")),"\n",'"test" 是預設的資料庫。',"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-output"},"test\n")),"\n"),"\n",a.createElement(n.li,null,"取得所有資料庫","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"show dbs\n")),"\n"),"\n",a.createElement(n.li,null,"切換資料庫",a.createElement(n.br),"\n","若資料庫不存在，則會自動新建。","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"use <database name>\n")),"\n"),"\n",a.createElement(n.li,null,"刪除資料庫","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.dropDatabase()\n")),"\n"),"\n",a.createElement(n.li,null,"查詢基本指令","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"help\n")),"\n"),"\n"),"\n",a.createElement(n.h1,null,"Collection"),"\n",a.createElement(n.h3,null,"如同 SQL 的「table」"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"取得目前資料庫的 collection","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"show collections\n")),"\n"),"\n",a.createElement(n.li,null,"創建 collection","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.createCollection('<collection name>')\n")),"\n"),"\n",a.createElement(n.li,null,"刪除 collection","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.<collection name>.drop()\n")),"\n"),"\n",a.createElement(n.li,null,"查詢基本指令","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.help()\n")),"\n"),"\n"),"\n",a.createElement(n.h1,null,"Document"),"\n",a.createElement(n.h3,null,"如同 SQL 的「row」"),"\n",a.createElement(n.p,null,"「field」 is like SQL 「column」。",a.createElement(n.br),"\n","BSON 是一種二進制序列化的類 JSON 格式，為「Binary JSON」的縮寫。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"取得所有資料","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.<collection name>.find()\n")),"\n"),"\n",a.createElement(n.li,null,"取得資料的數量","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.<collection name>.find().count()\n")),"\n"),"\n",a.createElement(n.li,null,"限制資料的數量","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.<collection name>.find().limit(<number>)\n")),"\n"),"\n",a.createElement(n.li,null,"排列資料",a.createElement(n.br),"\n","「1」代表升序",a.createElement(n.br),"\n","「-1」代表降序","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.<collection name>.find().sort(<BSON>)\n")),"\n","只取得最新 3 筆資料","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.<collection name>.find().sort({$natural: -1}).limit(3)\n")),"\n"),"\n",a.createElement(n.li,null,"搜尋資料","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.<collection name>.find({\r\n    <document name>: <value>\r\n})\n")),"\n","數值比較",a.createElement(n.br),"\n","「gt」代表大於",a.createElement(n.br),"\n","「gte」代表大於等於",a.createElement(n.br),"\n","「lt」代表小於",a.createElement(n.br),"\n","「lte」代表小於等於","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.<collection name>.find({\r\n    <document name>: {\r\n        $gt: <value>\r\n    }\r\n})\n")),"\n"),"\n",a.createElement(n.li,null,"新增資料",a.createElement(n.br),"\n","若 collection 不存在，則自動新建。","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.<collection name>.insertOne(<BSON>)\r\ndb.<collection name>.insertMany([<BSON>, <BSON>, ...])\n")),"\n"),"\n",a.createElement(n.li,null,"查詢基本指令","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"db.<collection name>.help()\n")),"\n"),"\n"),"\n",a.createElement(n.h1,null,"Docker 官方映像檔"),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,"下載映像檔","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"docker pull mongo\n")),"\n"),"\n",a.createElement(n.li,null,"運行映像檔","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"docker run --name mongo --rm -d -v <data path>:/data/db -p 27017:27017 mongo\n")),"\n","若需要使用 ",a.createElement(n.a,{href:"#MongoExpress"},"Mongo Express")," 則需要連線至相同網路","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"docker run \\\r\n    --network <network name> \\\r\n    ...\n")),"\n"),"\n",a.createElement(n.li,null,"進入 CLI","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"docker exec -it mongo bash\n")),"\n"),"\n",a.createElement(n.li,null,"執行 mongodb 指令","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"mongosh\n")),"\n"),"\n",a.createElement(n.li,null,"測試是否部屬成功","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"show dbs\n")),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-output"},"admin   40.00 KiB\r\nconfig  12.00 KiB\r\nlocal   40.00 KiB\n")),"\n"),"\n"),"\n",a.createElement(n.h1,null,"Mongo Express"),"\n",a.createElement(n.h3,null,"基於 Node.js 與 Express.js 且開源的 MongoDB 網頁管理界面"),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,"下載映像檔","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"docker pull mongo-express\n")),"\n"),"\n",a.createElement(n.li,null,"運行映像檔","\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"docker run --name mongo-express \\\r\n    --network <network name> \\\r\n    -e ME_CONFIG_MONGODB_SERVER=<mongodb container name> \\\r\n    -p 8081:8081 \\\r\n    -d \\\r\n    mongo-express\n")),"\n"),"\n",a.createElement(n.li,null,"進入管理網頁",a.createElement(n.br),"\n","> ",a.createElement(n.a,{href:"http://localhost:8081"},"http://localhost:8081")),"\n"),"\n",a.createElement(n.h1,null,"Docker Compose"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-yaml"},"version: '3'\r\nservices:\r\n    mongo:\r\n        image: mongo\r\n        container_name: mongo\r\n        ports:\r\n            - 27017:27017\r\n        volumes:\r\n            - ./:/data/db\r\n        networks:\r\n            - mongo\r\n    mongo-express:\r\n        image: mongo-express\r\n        container_name: mongo-express\r\n        ports:\r\n            - 8081:8081\r\n        networks:\r\n            - mongo\r\nnetworks:\r\n    mongo:\n")))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?a.createElement(n,e,a.createElement(r,e)):r(e)},m=l(1883),o=l(8032),s=l(7392),u=l(2036),E=l(908),i=l(8197),d=l(2349),g=l(8554),p=l(4072),h=l(1950);const N=e=>{var n;let{data:r,location:c,children:d}=e;const N=r.site.siteMetadata.languages,{mdx:b}=r,f=(0,a.useRef)(null),{0:k,1:S}=(0,a.useState)(!0);return a.createElement(E.Z,{language:(0,u.G)(c.pathname,N).id},a.createElement(i.Z,{currentPath:c.pathname,contents:r.allMdx.nodes.map((e=>({title:e.frontmatter.title,depth:e.fields.depth,path:e.fields.path})))}),a.createElement("div",{ref:f,className:h.hi,onScroll:()=>S(0===f.current.scrollTop)},a.createElement("div",{className:h.nC},a.createElement("header",{className:h.fr},a.createElement("h1",null,b.frontmatter.title),a.createElement("h3",null,b.fields.date)),b.tableOfContents.items?a.createElement("ol",{className:h.Jt},a.createElement("span",null,(0,u.G)(c.pathname,N).headline),null===(n=b.tableOfContents.items)||void 0===n?void 0:n.map((e=>{let{title:n}=e;return a.createElement("li",{key:"Heading_"+n},a.createElement(m.Link,{to:"#"+(0,s.S)(n),className:h.p4},n))}))):a.createElement(a.Fragment,null),a.createElement("div",{className:h.Ig},a.createElement(t.Zo,{components:{a:e=>{let{href:n,children:l}=e;return a.createElement("a",{target:"_blank",href:n},l)},pre:e=>{let{children:n}=e;return a.createElement(g.Z,null,n)},h1:e=>{let{children:n}=e;return a.createElement(p.Z,null,n)}}},d))),a.createElement("button",{className:h.vc,disabled:k,onClick:()=>{(0,m.navigate)(c.pathname),f.current.scrollTo({top:0,behavior:"smooth"})}},a.createElement(o.S,{className:h.BH,src:"../../images/curvedArrow.png",alt:"scroll to top icon",title:"Scroll to top",loading:"eager",__imageData:l(5097)}))))};function b(e){return a.createElement(N,e,a.createElement(c,e))}const f=e=>{let{data:n,location:l}=e;return a.createElement(d.Z,{title:n.mdx.frontmatter.title,pathname:l.pathname})}}}]);
//# sourceMappingURL=component---src-templates-article-index-tsx-content-file-path-c-users-user-desktop-github-blog-content-tool-notes-mongo-db-zh-md-251348a6f79bd50a93c7.js.map