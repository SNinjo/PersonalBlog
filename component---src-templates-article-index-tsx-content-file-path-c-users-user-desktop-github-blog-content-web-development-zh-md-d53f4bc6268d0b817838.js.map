{"version":3,"file":"component---src-templates-article-index-tsx-content-file-path-c-users-user-desktop-github-blog-content-web-development-zh-md-d53f4bc6268d0b817838.js","mappings":"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","sources":["webpack://SNinjo Blog/./content/WebDevelopment/zh.md","webpack://SNinjo Blog/./src/templates/Article/index.tsx","webpack://SNinjo Blog/./src/components/Copyright/index.tsx","webpack://SNinjo Blog/./src/components/Copyright/index.module.scss","webpack://SNinjo Blog/./src/components/Menu/index.module.scss","webpack://SNinjo Blog/./src/components/Menu/index.tsx","webpack://SNinjo Blog/./src/components/Navigation/index.module.scss","webpack://SNinjo Blog/./src/components/Navigation/index.tsx","webpack://SNinjo Blog/./src/components/SEO/index.tsx","webpack://SNinjo Blog/./src/tools/Language/index.ts","webpack://SNinjo Blog/./src/templates/Article/index.module.scss","webpack://SNinjo Blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"正在撰寫...\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/USER/Desktop/github/Blog/content/WebDevelopment/zh.md\";\nimport React, {useRef, useState} from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport {StaticImage} from 'gatsby-plugin-image';\nimport {getLanguage} from '../../tools/Language';\nimport Layout from 'components/Layout';\nimport Menu from 'components/Menu';\nimport SEO from 'components/SEO';\nimport * as style from './index.module.scss';\nconst ArticleTemplate = _ref => {\n  let {data, location, children} = _ref;\n  const {mdx: article} = data;\n  return React.createElement(Layout, {\n    language: getLanguage(location.pathname, data.site.siteMetadata.languages).id\n  }, React.createElement(\"div\", {\n    className: style.div\n  }, React.createElement(Menu, {\n    currentPath: location.pathname,\n    contents: data.allMdx.nodes.map(node => ({\n      title: node.frontmatter.title,\n      depth: node.fields.depth,\n      path: node.fields.path\n    }))\n  }), React.createElement(\"section\", null, React.createElement(\"div\", {\n    className: style.container\n  }, React.createElement(\"header\", null, React.createElement(\"h1\", null, article.frontmatter.title), React.createElement(\"h3\", null, article.fields.date)), React.createElement(\"div\", {\n    className: style.article\n  }, React.createElement(MDXProvider, {\n    components: {\n      pre: _ref2 => {\n        let {children} = _ref2;\n        const refPre = useRef(null);\n        const {0: isCopied, 1: setCopiedState} = useState(false);\n        const animationDuration = 3;\n        const refTimeout = useRef();\n        const copy = async () => {\n          await navigator.clipboard.writeText(refPre.current.innerText);\n          setCopiedState(true);\n          clearTimeout(refTimeout.current);\n          refTimeout.current = setTimeout(() => setCopiedState(false), 1000 * animationDuration);\n        };\n        const cssCopied = {\n          borderColor: 'lightgreen'\n        };\n        return React.createElement(\"pre\", {\n          ref: refPre\n        }, children, React.createElement(\"button\", {\n          style: isCopied ? cssCopied : {},\n          className: style.copyButton,\n          onClick: copy\n        }, isCopied ? React.createElement(StaticImage, {\n          className: style.img,\n          src: \"../../images/tick.png\",\n          alt: \"tick icon\",\n          title: \"tick icon\",\n          loading: \"eager\",\n          __imageData: require(\"C:/Users/USER/Desktop/github/Blog/.cache/caches/gatsby-plugin-image/2779116280.json\")\n        }) : React.createElement(StaticImage, {\n          className: style.img,\n          src: \"../../images/copy.png\",\n          alt: \"copy icon\",\n          title: \"copy icon\",\n          loading: \"eager\",\n          __imageData: require(\"C:/Users/USER/Desktop/github/Blog/.cache/caches/gatsby-plugin-image/778504682.json\")\n        })));\n      }\n    }\n  }, children))))));\n};\nArticleTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticleTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = _ref3 => {\n  let {data, location} = _ref3;\n  return React.createElement(SEO, {\n    title: data.mdx.frontmatter.title,\n    pathname: location.pathname\n  });\n};\nconst query = \"953797205\";\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nimport * as style from './index.module.scss';\r\n\r\n\r\nconst Copyright = () => {\r\n    return (\r\n        <Link\r\n            to='/Preface/Copyright'\r\n            className={style.link}\r\n        >\r\n            <p>SNinjo 2023 © all rights reserved</p>\r\n        </Link>\r\n    )\r\n}\r\nexport default Copyright;","// extracted by mini-css-extract-plugin\nexport var link = \"index-module--link--288ba\";","// extracted by mini-css-extract-plugin\nexport var bottom = \"index-module--bottom--f3270\";\nexport var currentPath = \"index-module--currentPath--87fa4\";\nexport var imageContainer = \"index-module--imageContainer--7d443\";\nexport var img = \"index-module--img--14cbc\";\nexport var link = \"index-module--link--2398e\";\nexport var nav = \"index-module--nav--88d41\";\nexport var show = \"index-module--show--d0168\";","import React, { FC, useState } from 'react';\r\nimport { Link, useStaticQuery, graphql } from 'gatsby';\r\nimport { StaticImage } from 'gatsby-plugin-image';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport Navigation from 'components/Navigation';\r\nimport Copyright from 'components/Copyright';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype QueriedData = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = {\r\n    currentPath: string\r\n    contents: Array<{\r\n        title: string\r\n        depth: number\r\n        path: string\r\n    }>\r\n}\r\n\r\nconst Menu: FC<Props> = ({ currentPath, contents: arrContents }) => {\r\n    const { site }: QueriedData = useStaticQuery(graphql`\r\n        query Menu {\r\n            site {\r\n                siteMetadata {\r\n                    languages {\r\n                        id\r\n                        path\r\n                        contents\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const language = getLanguage(currentPath, site.siteMetadata.languages);\r\n\r\n    const [isShow, setDisplayState] = useState(false);\r\n\r\n\r\n    return (\r\n        <nav\r\n            className={`${style.nav} ${isShow? style.show : ''}`}\r\n        >\r\n            <div\r\n                className={`${style.imageContainer} ${isShow? '' : style.show}`}\r\n                \r\n                onClick={() => setDisplayState(true)}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/list.png'\r\n                    alt='list icon'\r\n                    title='Open menu'\r\n                    loading='eager'\r\n                />\r\n            </div>\r\n            <div\r\n                className={`${style.imageContainer} ${isShow? style.show : ''}`}\r\n                \r\n                onClick={() => setDisplayState(false)}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/cross.png'\r\n                    alt='cross icon'\r\n                    title='Close menu'\r\n                    loading='eager'\r\n                />\r\n            </div>\r\n            <Link\r\n                to={`/contents/${language.path}`}\r\n                className={style.link}\r\n            >\r\n                <span>{language.contents}</span>\r\n            </Link>\r\n            {\r\n                arrContents.map((contents, index) => (\r\n                    <Link\r\n                        key={`Link${index}`}\r\n                        to={contents.path}\r\n                        className={`${style.link} ${ currentPath.match(new RegExp(`${contents.path}[a-z]*\\/?$`))? style.currentPath : '' }`}\r\n                    >\r\n                        <span\r\n                            style={{\r\n                                paddingLeft: `${20 * contents.depth}px`\r\n                            }}\r\n                        >\r\n                            {contents.title}\r\n                        </span>\r\n                    </Link>\r\n                ))\r\n            }\r\n\r\n            <div\r\n                className={style.bottom}\r\n            >\r\n                <Navigation\r\n                    currentPath={currentPath}\r\n                />\r\n                <Copyright />\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Menu;","// extracted by mini-css-extract-plugin\nexport var img = \"index-module--img--50e58\";\nexport var link = \"index-module--link--490a4\";\nexport var nav = \"index-module--nav--287f4\";","import React, { FC } from 'react';\r\nimport { Link, useStaticQuery, graphql, navigate } from 'gatsby';\r\nimport { StaticImage } from 'gatsby-plugin-image';\r\n\r\nimport { language, getLanguage } from '../../tools/Language';\r\nimport * as style from './index.module.scss';\r\n\r\n\r\ntype QueriedData = {\r\n    site: {\r\n        siteMetadata: {\r\n            languages: Array<language>\r\n        }\r\n    }\r\n}\r\n\r\ntype Props = {\r\n    currentPath: string\r\n}\r\nconst Navigation: FC<Props> = ({ currentPath }) => {\r\n    const { site }: QueriedData = useStaticQuery(graphql`\r\n        query Navigation {\r\n            site {\r\n                siteMetadata {\r\n                    languages {\r\n                        id\r\n                        name\r\n                        path\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const languages = site.siteMetadata.languages;\r\n\r\n    const navigateTo = (fromLanguagePath: string, toLanguagePath: string) => {\r\n        navigate( currentPath.replace(new RegExp(`\\/${fromLanguagePath}\\/?$`), `\\/${toLanguagePath}`) );\r\n    }\r\n\r\n\r\n    return (\r\n        <nav\r\n            className={style.nav}\r\n        >\r\n            <Link\r\n                to='/'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/blog.png'\r\n                    alt='blog logo'\r\n                    title='SNinjo Blog'\r\n                    loading='eager'\r\n                />\r\n            </Link>\r\n            <a\r\n                href='https://SNinjo.com'\r\n                target='_blank'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/sninjo.png'\r\n                    alt='SNinjo logo'\r\n                    title='SNinjo Personal Website'\r\n                    loading='eager'\r\n                />\r\n            </a>\r\n            <a\r\n                href='https://SNinjo.com/contact'\r\n                target='_blank'\r\n                className={style.link}\r\n            >\r\n                <StaticImage\r\n                    className={style.img}\r\n                    src='../../images/email.png'\r\n                    alt='contact icon'\r\n                    title='Contact Information'\r\n                    loading='eager'\r\n                />\r\n            </a>\r\n\r\n            <select\r\n                defaultValue={getLanguage(currentPath, languages).path}\r\n\r\n                onChange={  event => navigateTo(getLanguage(currentPath, languages).path, event.target.value)  }\r\n            >\r\n                {\r\n                    languages.map((language, index) => (\r\n                        <option\r\n                            key={`Language${index}`}\r\n                            value={language.path}\r\n                        >\r\n                            {language.name}\r\n                        </option>\r\n                    ))\r\n                }\r\n            </select>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navigation;","import React, { FC } from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\n\r\n\r\ntype Props = {\r\n    title: string\r\n    pathname: string\r\n}\r\n\r\nconst SEO: FC<Props> = ({ title: subtitle, pathname }) => {\r\n    const { site } = useStaticQuery(graphql`\r\n        query SEO {\r\n            site {\r\n                siteMetadata {\r\n                    title\r\n                    description\r\n                    author\r\n                    image\r\n                    siteUrl\r\n                }\r\n            }\r\n        }\r\n    `)\r\n    const { title: mainTitle, description, author, image: imagePath, siteUrl } = site.siteMetadata;\r\n    const title = `${subtitle? `${subtitle} | ` : ''}${mainTitle}`;\r\n    const url = `${siteUrl}${pathname}`;\r\n    const image = `${siteUrl}${imagePath}`;\r\n\r\n\r\n    return (\r\n        <>\r\n            <title>{title}</title>\r\n            <link rel='canonical' href={url} />\r\n\r\n            <meta name=\"description\" content={description} />\r\n            <meta name=\"image\" content={image} />\r\n\r\n            <meta name='og:title' content={title} />\r\n            <meta name='og:description' content={description} />\r\n            <meta name='og:image' content={image} />\r\n            <meta name='og:type' content='website' />\r\n            <meta name='og:url' content={url} />\r\n            <meta name='og:site_name' content={mainTitle} />\r\n            \r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n            <meta name=\"twitter:title\" content={title} />\r\n            <meta name=\"twitter:url\" content={url} />\r\n            <meta name=\"twitter:description\" content={description} />\r\n            <meta name=\"twitter:image\" content={image} />\r\n            {/* <meta name=\"twitter:creator\" content={seo.twitterUsername} /> */}\r\n        </>\r\n    )\r\n}\r\nexport default SEO;","export type language = {\r\n    id: string,\r\n    name: string,\r\n    path: string,\r\n    contents: string,\r\n    notMatch: string,\r\n}\r\n\r\nexport function getLanguage(path: string, languages: Array<language>): language {\r\n    let defaultLanguage: language;\r\n    for (const language of languages) {\r\n        if (  !language.id || !language.path && (language.path !== '')  ) throw Error('Language configuration error, please add \"id\" and \"path\" in graphql')\r\n\r\n        if (language.id === 'en') defaultLanguage = language;\r\n        else if (path.match(new RegExp(`\\/${language.path}\\/?$`))) return language;\r\n    }\r\n    return defaultLanguage!;\r\n}","// extracted by mini-css-extract-plugin\nexport var article = \"index-module--article--d8571\";\nexport var bottom = \"index-module--bottom--9d00e\";\nexport var container = \"index-module--container--7de9d\";\nexport var copyButton = \"index-module--copyButton--5c2e7\";\nexport var currentPath = \"index-module--currentPath--3f4f6\";\nexport var div = \"index-module--div--a334b\";\nexport var imageContainer = \"index-module--imageContainer--499ab\";\nexport var img = \"index-module--img--2720d\";\nexport var link = \"index-module--link--42a5a\";\nexport var nav = \"index-module--nav--e1ac6\";\nexport var show = \"index-module--show--fc7f8\";","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","ArticleTemplate","_ref","data","location","children","mdx","article","Layout","language","getLanguage","pathname","site","siteMetadata","languages","id","className","style","Menu","currentPath","contents","allMdx","nodes","map","node","title","frontmatter","depth","fields","path","date","MDXProvider","pre","_ref2","refPre","useRef","isCopied","setCopiedState","useState","refTimeout","ref","borderColor","onClick","async","navigator","clipboard","writeText","current","innerText","clearTimeout","setTimeout","StaticImage","src","alt","loading","__imageData","require","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref3","SEO","Link","to","imageContainer","img","show","arrContents","useStaticQuery","isShow","setDisplayState","index","key","match","RegExp","paddingLeft","Navigation","Copyright","href","target","defaultValue","onChange","event","navigateTo","fromLanguagePath","toLanguagePath","value","navigate","replace","name","subtitle","mainTitle","description","author","image","imagePath","siteUrl","url","rel","content","defaultLanguage","Error","container","copyButton","div","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider"],"sourceRoot":""}