"use strict";(self.webpackChunkSNinjo_Blog=self.webpackChunkSNinjo_Blog||[]).push([[2600],{1132:function(e,l,n){n.r(l),n.d(l,{Head:function(){return f},default:function(){return N}});var t=n(1151),a=n(7294);function c(e){const l=Object.assign({p:"p",br:"br",a:"a",h1:"h1",ul:"ul",li:"li",pre:"pre",code:"code",h3:"h3",ol:"ol"},(0,t.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(l.p,null,"MongoDB is a source-available, cross-platform, document-oriented database program. Classified as a NoSQL database product, MongoDB utilizes JSON-like documents with optional schemas.",a.createElement(l.br),"\n",a.createElement(l.a,{href:"https://www.mongodb.com/docs/manual/introduction/"},"View more information")),"\n",a.createElement(l.h1,null,"CLI Command"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"enter CLI","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"mongosh\n")),"\n","specify database parameters","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"mongosh \\\r\n    --host <host> \\\r\n    --port <port> \\\r\n    --username <username> \\\r\n    --authenticationDatabase <database name>\n")),"\n"),"\n"),"\n",a.createElement(l.h1,null,"Database"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"get the database you are using","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"db\n")),"\n",'"test" is the default database.',"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-output"},"test\n")),"\n"),"\n",a.createElement(l.li,null,"get all databases","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"show dbs\n")),"\n"),"\n",a.createElement(l.li,null,"switch the database",a.createElement(l.br),"\n","If the database does not exist, it'll be created automatically.","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"use <database name>\n")),"\n"),"\n",a.createElement(l.li,null,"drop the database","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"db.dropDatabase()\n")),"\n"),"\n",a.createElement(l.li,null,"list basic commands","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"help\n")),"\n"),"\n"),"\n",a.createElement(l.h1,null,"Collection"),"\n",a.createElement(l.h3,null,'like SQL "table"'),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"get all collections in current database","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"show collections\n")),"\n"),"\n",a.createElement(l.li,null,"create the collection","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"db.createCollection('<collection name>')\n")),"\n"),"\n",a.createElement(l.li,null,"drop the collection","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"db.<collection name>.drop()\n")),"\n"),"\n",a.createElement(l.li,null,"list basic commands","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"db.help()\n")),"\n"),"\n"),"\n",a.createElement(l.h1,null,"Document"),"\n",a.createElement(l.h3,null,'like SQL "row"'),"\n",a.createElement(l.p,null,'"field" is like SQL "column".',a.createElement(l.br),"\n","BSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents."),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"get all data","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"db.<collection name>.find()\n")),"\n"),"\n",a.createElement(l.li,null,"insert data",a.createElement(l.br),"\n","If the collection does not exist, it'll be created automatically.","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"db.<collection name>.insertOne(<BSON>)\r\ndb.<collection name>.insertMany([<BSON>, <BSON>, ...])\n")),"\n"),"\n",a.createElement(l.li,null,"limit the number of data","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"db.<collection name>.find().limit(<number>)\n")),"\n"),"\n",a.createElement(l.li,null,"sort data",a.createElement(l.br),"\n",'"1" means ascending order',a.createElement(l.br),"\n",'"-1" means descending order',"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"db.<collection name>.find().sort(<BSON>)\n")),"\n","only get the last 3 data","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"db.<collection name>.find().sort({$natural: -1}).limit(3)\n")),"\n"),"\n",a.createElement(l.li,null,"list basic commands","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"db.<collection name>.help()\n")),"\n"),"\n"),"\n",a.createElement(l.h1,null,"Docker Official Image"),"\n",a.createElement(l.ol,null,"\n",a.createElement(l.li,null,"download the image","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker pull mongo\n")),"\n"),"\n",a.createElement(l.li,null,"run the image","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker run --name mongo -d -v <data path>:/data/db -p 27017:27017 -rm mongo\n")),"\n"),"\n",a.createElement(l.li,null,"enter CLI","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"docker exec -it mongo bash\n")),"\n"),"\n",a.createElement(l.li,null,"run the mongodb command","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"mongosh\n")),"\n"),"\n",a.createElement(l.li,null,"test whether the construction is successful","\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-shell"},"show dbs\n")),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-output"},"admin   40.00 KiB\r\nconfig  12.00 KiB\r\nlocal   40.00 KiB\n")),"\n"),"\n"))}var r=function(e){void 0===e&&(e={});const{wrapper:l}=Object.assign({},(0,t.ah)(),e.components);return l?a.createElement(l,e,a.createElement(c,e)):c(e)},m=n(1883),o=n(8032),s=n(7392),i=n(2036),u=n(908),d=n(8197),E=n(2349),h=n(8554),g=n(4072),p=n(1950);const b=e=>{var l;let{data:c,location:r,children:E}=e;const b=c.site.siteMetadata.languages,{mdx:N}=c,f=(0,a.useRef)(null),{0:S,1:k}=(0,a.useState)(!0);return a.createElement(u.Z,{language:(0,i.G)(r.pathname,b).id},a.createElement(d.Z,{currentPath:r.pathname,contents:c.allMdx.nodes.map((e=>({title:e.frontmatter.title,depth:e.fields.depth,path:e.fields.path})))}),a.createElement("div",{ref:f,className:p.hi,onScroll:()=>k(0===f.current.scrollTop)},a.createElement("div",{className:p.nC},a.createElement("header",{className:p.fr},a.createElement("h1",null,N.frontmatter.title),a.createElement("h3",null,N.fields.date)),N.tableOfContents.items?a.createElement("ol",{className:p.Jt},a.createElement("span",null,(0,i.G)(r.pathname,b).headline),null===(l=N.tableOfContents.items)||void 0===l?void 0:l.map((e=>{let{title:l}=e;return a.createElement("li",{key:"Heading_"+l},a.createElement(m.Link,{to:"#"+(0,s.S)(l),className:p.p4},l))}))):a.createElement(a.Fragment,null),a.createElement("div",{className:p.Ig},a.createElement(t.Zo,{components:{a:e=>{let{href:l,children:n}=e;return a.createElement("a",{target:"_blank",href:l},n)},pre:e=>{let{children:l}=e;return a.createElement(h.Z,null,l)},h1:e=>{let{children:l}=e;return a.createElement(g.Z,null,l)}}},E))),a.createElement("button",{className:p.vc,disabled:S,onClick:()=>{(0,m.navigate)(r.pathname),f.current.scrollTo({top:0,behavior:"smooth"})}},a.createElement(o.S,{className:p.BH,src:"../../images/curvedArrow.png",alt:"scroll to top icon",title:"Scroll to top",loading:"eager",__imageData:n(5097)}))))};function N(e){return a.createElement(b,e,a.createElement(r,e))}const f=e=>{let{data:l,location:n}=e;return a.createElement(E.Z,{title:l.mdx.frontmatter.title,pathname:n.pathname})}}}]);
//# sourceMappingURL=component---src-templates-article-index-tsx-content-file-path-c-users-user-desktop-github-blog-content-tool-notes-mongo-db-en-md-a06191e11fe75183c73b.js.map